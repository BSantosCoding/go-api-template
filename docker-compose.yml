# /home/bsant/testing/go-api-template/docker-compose.yml
version: '3.8'

networks:
  app-network:
    driver: bridge

services:
  # PostgreSQL Database Service
  db:
    image: postgres:15-alpine
    container_name: go_api_db
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-api_db}
    ports:
      - '${DB_PORT_HOST:-5432}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-api_db}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks: # Add db to the network
      - app-network
  db-atlas:
    image: postgres:15-alpine
    container_name: go_api_db_atlas
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_ATLAS_NAME:-atlas_dev}
    ports:
      - '${DB_ATLAS_PORT:-5432}:5432'
    networks: # Add db to the network
      - app-network

  # Go API Service
  api:
    container_name: go_api_app
    build:
      context: . # Build from the current directory's Dockerfile
      target: builder
    ports:
      - '${SERVER_PORT_HOST:-8080}:8080'
    volumes:
      # Mount source code for hot-reloading
      - .:/app
      # Prevent host tmp/docs from overwriting container versions
      - /app/tmp
      - /app/docs
      # Prevent go build cache/mod cache on host interfering
      - /app/go/pkg/mod
      - /app/root/.cache/go-build
    environment:
      CORS_ALLOWED_ORIGINS: 'http://127.0.0.1:5173,http://localhost:5173'
      SERVER_HOST: '0.0.0.0'
      SERVER_PORT: 8080
      DATABASE_URL: 'postgres://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db:5432/${DB_NAME:-api_db}?sslmode=disable'
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-api_db}
      REDIS_ADDR: redis:6379 # Use the service name 'redis' and its internal port
      REDIS_PASSWORD: ${REDIS_PASSWORD:-} # Pass password from .env if set
      REDIS_DB: ${REDIS_DB:-0} # Pass DB index from .env if set
      GIN_MODE: debug
      # Ensure GOPATH is set correctly if needed by tools inside builder
      # GOPATH: /go
    depends_on:
      db:
        condition: service_healthy
      redis: # Make API depend on Redis starting (optional but good practice)
        condition: service_started # Or service_healthy if you add a healthcheck
    # Use Air for hot-reloading
    command: air
    restart: unless-stopped
    networks: # Add api to the network
      - app-network
    healthcheck:
      test: curl --fail http://localhost:8080/api/v1/health || exit 1
      interval: 30s
      timeout: 5s
      start_period: 30s
      retries: 3

  # Redis Service
  redis:
    image: redis:7-alpine
    container_name: go_api_redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - '${REDIS_PORT_HOST:-6379}:6379' # Map host port (default 6379) to container port
    volumes:
      - redis_data:/data # Optional: Persist Redis data
    restart: unless-stopped
    networks: # Add redis to the network
      - app-network

volumes:
  postgres_data:
    driver: local
  redis_data: # Define the volume for Redis persistence
    driver: local
