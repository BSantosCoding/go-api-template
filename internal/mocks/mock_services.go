// Code generated by MockGen. DO NOT EDIT.
// Source: go-api-template/internal/services (interfaces: UserService,JobService,InvoiceService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "go-api-template/internal/models"
	dto "go-api-template/internal/transport/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockUserService) Delete(arg0 context.Context, arg1 *dto.DeleteUserRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserService)(nil).Delete), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockUserService) GetAll(arg0 context.Context) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUserServiceMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserService)(nil).GetAll), arg0)
}

// GetByEmail mocks base method.
func (m *MockUserService) GetByEmail(arg0 context.Context, arg1 *dto.GetUserByEmailRequest) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserServiceMockRecorder) GetByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserService)(nil).GetByEmail), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockUserService) GetByID(arg0 context.Context, arg1 *dto.GetUserByIdRequest) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserServiceMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserService)(nil).GetByID), arg0, arg1)
}

// Login mocks base method.
func (m *MockUserService) Login(arg0 context.Context, arg1 *dto.LoginRequest) (*models.User, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserService)(nil).Login), arg0, arg1)
}

// Register mocks base method.
func (m *MockUserService) Register(arg0 context.Context, arg1 *dto.CreateUserRequest) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserServiceMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserService)(nil).Register), arg0, arg1)
}

// Update mocks base method.
func (m *MockUserService) Update(arg0 context.Context, arg1 *dto.UpdateUserRequest) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserServiceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserService)(nil).Update), arg0, arg1)
}

// MockJobService is a mock of JobService interface.
type MockJobService struct {
	ctrl     *gomock.Controller
	recorder *MockJobServiceMockRecorder
}

// MockJobServiceMockRecorder is the mock recorder for MockJobService.
type MockJobServiceMockRecorder struct {
	mock *MockJobService
}

// NewMockJobService creates a new mock instance.
func NewMockJobService(ctrl *gomock.Controller) *MockJobService {
	mock := &MockJobService{ctrl: ctrl}
	mock.recorder = &MockJobServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobService) EXPECT() *MockJobServiceMockRecorder {
	return m.recorder
}

// AssignContractor mocks base method.
func (m *MockJobService) AssignContractor(arg0 context.Context, arg1 *dto.AssignContractorRequest) (*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignContractor", arg0, arg1)
	ret0, _ := ret[0].(*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignContractor indicates an expected call of AssignContractor.
func (mr *MockJobServiceMockRecorder) AssignContractor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignContractor", reflect.TypeOf((*MockJobService)(nil).AssignContractor), arg0, arg1)
}

// CreateJob mocks base method.
func (m *MockJobService) CreateJob(arg0 context.Context, arg1 *dto.CreateJobRequest) (*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", arg0, arg1)
	ret0, _ := ret[0].(*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockJobServiceMockRecorder) CreateJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockJobService)(nil).CreateJob), arg0, arg1)
}

// DeleteJob mocks base method.
func (m *MockJobService) DeleteJob(arg0 context.Context, arg1 *dto.DeleteJobRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJob indicates an expected call of DeleteJob.
func (mr *MockJobServiceMockRecorder) DeleteJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockJobService)(nil).DeleteJob), arg0, arg1)
}

// GetJobByID mocks base method.
func (m *MockJobService) GetJobByID(arg0 context.Context, arg1 *dto.GetJobByIDRequest) (*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobByID", arg0, arg1)
	ret0, _ := ret[0].(*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobByID indicates an expected call of GetJobByID.
func (mr *MockJobServiceMockRecorder) GetJobByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobByID", reflect.TypeOf((*MockJobService)(nil).GetJobByID), arg0, arg1)
}

// ListAvailableJobs mocks base method.
func (m *MockJobService) ListAvailableJobs(arg0 context.Context, arg1 *dto.ListAvailableJobsRequest) ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableJobs", arg0, arg1)
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableJobs indicates an expected call of ListAvailableJobs.
func (mr *MockJobServiceMockRecorder) ListAvailableJobs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableJobs", reflect.TypeOf((*MockJobService)(nil).ListAvailableJobs), arg0, arg1)
}

// ListJobsByContractor mocks base method.
func (m *MockJobService) ListJobsByContractor(arg0 context.Context, arg1 *dto.ListJobsByContractorRequest) ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsByContractor", arg0, arg1)
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobsByContractor indicates an expected call of ListJobsByContractor.
func (mr *MockJobServiceMockRecorder) ListJobsByContractor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsByContractor", reflect.TypeOf((*MockJobService)(nil).ListJobsByContractor), arg0, arg1)
}

// ListJobsByEmployer mocks base method.
func (m *MockJobService) ListJobsByEmployer(arg0 context.Context, arg1 *dto.ListJobsByEmployerRequest) ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsByEmployer", arg0, arg1)
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobsByEmployer indicates an expected call of ListJobsByEmployer.
func (mr *MockJobServiceMockRecorder) ListJobsByEmployer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsByEmployer", reflect.TypeOf((*MockJobService)(nil).ListJobsByEmployer), arg0, arg1)
}

// UnassignContractor mocks base method.
func (m *MockJobService) UnassignContractor(arg0 context.Context, arg1 *dto.UnassignContractorRequest) (*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnassignContractor", arg0, arg1)
	ret0, _ := ret[0].(*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnassignContractor indicates an expected call of UnassignContractor.
func (mr *MockJobServiceMockRecorder) UnassignContractor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnassignContractor", reflect.TypeOf((*MockJobService)(nil).UnassignContractor), arg0, arg1)
}

// UpdateJobDetails mocks base method.
func (m *MockJobService) UpdateJobDetails(arg0 context.Context, arg1 *dto.UpdateJobDetailsRequest) (*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobDetails", arg0, arg1)
	ret0, _ := ret[0].(*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobDetails indicates an expected call of UpdateJobDetails.
func (mr *MockJobServiceMockRecorder) UpdateJobDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobDetails", reflect.TypeOf((*MockJobService)(nil).UpdateJobDetails), arg0, arg1)
}

// UpdateJobState mocks base method.
func (m *MockJobService) UpdateJobState(arg0 context.Context, arg1 *dto.UpdateJobStateRequest) (*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobState", arg0, arg1)
	ret0, _ := ret[0].(*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobState indicates an expected call of UpdateJobState.
func (mr *MockJobServiceMockRecorder) UpdateJobState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobState", reflect.TypeOf((*MockJobService)(nil).UpdateJobState), arg0, arg1)
}

// MockInvoiceService is a mock of InvoiceService interface.
type MockInvoiceService struct {
	ctrl     *gomock.Controller
	recorder *MockInvoiceServiceMockRecorder
}

// MockInvoiceServiceMockRecorder is the mock recorder for MockInvoiceService.
type MockInvoiceServiceMockRecorder struct {
	mock *MockInvoiceService
}

// NewMockInvoiceService creates a new mock instance.
func NewMockInvoiceService(ctrl *gomock.Controller) *MockInvoiceService {
	mock := &MockInvoiceService{ctrl: ctrl}
	mock.recorder = &MockInvoiceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoiceService) EXPECT() *MockInvoiceServiceMockRecorder {
	return m.recorder
}

// CreateInvoice mocks base method.
func (m *MockInvoiceService) CreateInvoice(arg0 context.Context, arg1 *dto.CreateInvoiceRequest) (*models.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoice", arg0, arg1)
	ret0, _ := ret[0].(*models.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvoice indicates an expected call of CreateInvoice.
func (mr *MockInvoiceServiceMockRecorder) CreateInvoice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoice", reflect.TypeOf((*MockInvoiceService)(nil).CreateInvoice), arg0, arg1)
}

// DeleteInvoice mocks base method.
func (m *MockInvoiceService) DeleteInvoice(arg0 context.Context, arg1 *dto.DeleteInvoiceRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvoice", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInvoice indicates an expected call of DeleteInvoice.
func (mr *MockInvoiceServiceMockRecorder) DeleteInvoice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvoice", reflect.TypeOf((*MockInvoiceService)(nil).DeleteInvoice), arg0, arg1)
}

// GetInvoiceByID mocks base method.
func (m *MockInvoiceService) GetInvoiceByID(arg0 context.Context, arg1 *dto.GetInvoiceByIDRequest) (*models.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceByID", arg0, arg1)
	ret0, _ := ret[0].(*models.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceByID indicates an expected call of GetInvoiceByID.
func (mr *MockInvoiceServiceMockRecorder) GetInvoiceByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceByID", reflect.TypeOf((*MockInvoiceService)(nil).GetInvoiceByID), arg0, arg1)
}

// ListInvoicesByJob mocks base method.
func (m *MockInvoiceService) ListInvoicesByJob(arg0 context.Context, arg1 *dto.ListInvoicesByJobRequest) ([]models.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvoicesByJob", arg0, arg1)
	ret0, _ := ret[0].([]models.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvoicesByJob indicates an expected call of ListInvoicesByJob.
func (mr *MockInvoiceServiceMockRecorder) ListInvoicesByJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvoicesByJob", reflect.TypeOf((*MockInvoiceService)(nil).ListInvoicesByJob), arg0, arg1)
}

// UpdateInvoiceState mocks base method.
func (m *MockInvoiceService) UpdateInvoiceState(arg0 context.Context, arg1 *dto.UpdateInvoiceStateRequest) (*models.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvoiceState", arg0, arg1)
	ret0, _ := ret[0].(*models.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInvoiceState indicates an expected call of UpdateInvoiceState.
func (mr *MockInvoiceServiceMockRecorder) UpdateInvoiceState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvoiceState", reflect.TypeOf((*MockInvoiceService)(nil).UpdateInvoiceState), arg0, arg1)
}
