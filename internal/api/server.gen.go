// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for InvoiceState.
const (
	InvoiceStateDefaultState  InvoiceState = "Waiting"
	InvoiceStateStateComplete InvoiceState = "Complete"
	InvoiceStateStateWaiting  InvoiceState = "Waiting"
)

// Defines values for JobState.
const (
	JobStateDefaultState  JobState = "Waiting"
	JobStateStateArchived JobState = "Archived"
	JobStateStateComplete JobState = "Complete"
	JobStateStateOngoing  JobState = "Ongoing"
	JobStateStateWaiting  JobState = "Waiting"
)

// Defines values for JobapplicationState.
const (
	DefaultState   JobapplicationState = "Waiting"
	StateAccepted  JobapplicationState = "Accepted"
	StateRejected  JobapplicationState = "Rejected"
	StateWaiting   JobapplicationState = "Waiting"
	StateWithdrawn JobapplicationState = "Withdrawn"
)

// Defines values for GetJobsMyContractorParamsState.
const (
	GetJobsMyContractorParamsStateArchived GetJobsMyContractorParamsState = "Archived"
	GetJobsMyContractorParamsStateComplete GetJobsMyContractorParamsState = "Complete"
	GetJobsMyContractorParamsStateOngoing  GetJobsMyContractorParamsState = "Ongoing"
)

// Defines values for GetJobsMyEmployerParamsState.
const (
	GetJobsMyEmployerParamsStateArchived GetJobsMyEmployerParamsState = "Archived"
	GetJobsMyEmployerParamsStateComplete GetJobsMyEmployerParamsState = "Complete"
	GetJobsMyEmployerParamsStateOngoing  GetJobsMyEmployerParamsState = "Ongoing"
	GetJobsMyEmployerParamsStateWaiting  GetJobsMyEmployerParamsState = "Waiting"
)

// Defines values for GetJobsIdInvoicesParamsState.
const (
	Complete GetJobsIdInvoicesParamsState = "Complete"
	Waiting  GetJobsIdInvoicesParamsState = "Waiting"
)

// DtoCreateInvoiceRequest defines model for dto.CreateInvoiceRequest.
type DtoCreateInvoiceRequest struct {
	Adjustment *float32 `json:"adjustment,omitempty"`
	JobId      string   `json:"job_id"`
}

// DtoCreateJobRequest defines model for dto.CreateJobRequest.
type DtoCreateJobRequest struct {
	// Duration Duration in hours, must be positive
	Duration int `json:"duration"`

	// InvoiceInterval Interval in hours, must be positive
	InvoiceInterval int `json:"invoice_interval"`

	// Rate Rate per hour, must be positive
	Rate float32 `json:"rate"`
}

// DtoCreateUserRequest defines model for dto.CreateUserRequest.
type DtoCreateUserRequest struct {
	Email string `json:"email"`

	// Name Optional field
	Name *string `json:"name,omitempty"`

	// Password Required field
	Password string `json:"password"`
}

// DtoInvoiceResponse defines model for dto.InvoiceResponse.
type DtoInvoiceResponse struct {
	CreatedAt      *string `json:"created_at,omitempty"`
	Id             *string `json:"id,omitempty"`
	IntervalNumber *int    `json:"interval_number,omitempty"`
	JobId          *string `json:"job_id,omitempty"`

	// State Return state as string
	State     *string  `json:"state,omitempty"`
	UpdatedAt *string  `json:"updated_at,omitempty"`
	Value     *float32 `json:"value,omitempty"`
}

// DtoJobApplicationResponse defines model for dto.JobApplicationResponse.
type DtoJobApplicationResponse struct {
	ContractorId *string              `json:"contractor_id,omitempty"`
	CreatedAt    *string              `json:"created_at,omitempty"`
	Id           *string              `json:"id,omitempty"`
	JobId        *string              `json:"job_id,omitempty"`
	State        *JobapplicationState `json:"state,omitempty"`
	UpdatedAt    *string              `json:"updated_at,omitempty"`
}

// DtoJobResponse defines model for dto.JobResponse.
type DtoJobResponse struct {
	ContractorId    *string  `json:"contractor_id,omitempty"`
	CreatedAt       *string  `json:"created_at,omitempty"`
	Duration        *int     `json:"duration,omitempty"`
	EmployerId      *string  `json:"employer_id,omitempty"`
	Id              *string  `json:"id,omitempty"`
	InvoiceInterval *int     `json:"invoice_interval,omitempty"`
	Rate            *float32 `json:"rate,omitempty"`
	State           *string  `json:"state,omitempty"`
	UpdatedAt       *string  `json:"updated_at,omitempty"`
}

// DtoLoginRequest defines model for dto.LoginRequest.
type DtoLoginRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// DtoLoginResponse defines model for dto.LoginResponse.
type DtoLoginResponse struct {
	// AccessToken Access Token
	AccessToken *string `json:"accessToken,omitempty"`

	// RefreshToken Refresh Token
	RefreshToken *string          `json:"refreshToken,omitempty"`
	User         *DtoUserResponse `json:"user,omitempty"`
}

// DtoRefreshRequest defines model for dto.RefreshRequest.
type DtoRefreshRequest struct {
	RefreshToken string `json:"refreshToken"`
}

// DtoRefreshResponse defines model for dto.RefreshResponse.
type DtoRefreshResponse struct {
	// AccessToken Access Token
	AccessToken *string `json:"accessToken,omitempty"`

	// RefreshToken Refresh Token
	RefreshToken *string `json:"refreshToken,omitempty"`
}

// DtoUpdateInvoiceStateRequest defines model for dto.UpdateInvoiceStateRequest.
type DtoUpdateInvoiceStateRequest struct {
	State InvoiceState `json:"state"`
}

// DtoUpdateJobDetailsRequest defines model for dto.UpdateJobDetailsRequest.
type DtoUpdateJobDetailsRequest struct {
	Duration *int     `json:"duration,omitempty"`
	Rate     *float32 `json:"rate,omitempty"`
}

// DtoUpdateJobStateRequest defines model for dto.UpdateJobStateRequest.
type DtoUpdateJobStateRequest struct {
	State JobState `json:"state"`
}

// DtoUpdateUserRequest defines model for dto.UpdateUserRequest.
type DtoUpdateUserRequest struct {
	Id string `json:"id"`

	// Name Email    *string `json:"email" validate:"omitempty,email"`
	Name *string `json:"name,omitempty"`
}

// DtoUserResponse defines model for dto.UserResponse.
type DtoUserResponse struct {
	CreatedAt *string `json:"created_at,omitempty"`
	Email     *string `json:"email,omitempty"`

	// Id Use uuid.UUID to match your model
	Id        *string `json:"id,omitempty"`
	Name      *string `json:"name,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// InvoiceState defines model for invoice.State.
type InvoiceState string

// JobState defines model for job.State.
type JobState string

// JobapplicationState defines model for jobapplication.State.
type JobapplicationState string

// GetApplicationsMyParams defines parameters for GetApplicationsMy.
type GetApplicationsMyParams struct {
	// Limit Pagination limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Pagination offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetJobsAvailableParams defines parameters for GetJobsAvailable.
type GetJobsAvailableParams struct {
	// Limit Pagination limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Pagination offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// MinRate Minimum rate filter
	MinRate *float32 `form:"min_rate,omitempty" json:"min_rate,omitempty"`

	// MaxRate Maximum rate filter
	MaxRate *float32 `form:"max_rate,omitempty" json:"max_rate,omitempty"`
}

// GetJobsMyContractorParams defines parameters for GetJobsMyContractor.
type GetJobsMyContractorParams struct {
	// Limit Pagination limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Pagination offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// State Filter by state (Ongoing, Complete, Archived)
	State *GetJobsMyContractorParamsState `form:"state,omitempty" json:"state,omitempty"`

	// MinRate Minimum rate filter
	MinRate *float32 `form:"min_rate,omitempty" json:"min_rate,omitempty"`

	// MaxRate Maximum rate filter
	MaxRate *float32 `form:"max_rate,omitempty" json:"max_rate,omitempty"`
}

// GetJobsMyContractorParamsState defines parameters for GetJobsMyContractor.
type GetJobsMyContractorParamsState string

// GetJobsMyEmployerParams defines parameters for GetJobsMyEmployer.
type GetJobsMyEmployerParams struct {
	// Limit Pagination limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Pagination offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// State Filter by state (Waiting, Ongoing, Complete, Archived)
	State *GetJobsMyEmployerParamsState `form:"state,omitempty" json:"state,omitempty"`

	// MinRate Minimum rate filter
	MinRate *float32 `form:"min_rate,omitempty" json:"min_rate,omitempty"`

	// MaxRate Maximum rate filter
	MaxRate *float32 `form:"max_rate,omitempty" json:"max_rate,omitempty"`
}

// GetJobsMyEmployerParamsState defines parameters for GetJobsMyEmployer.
type GetJobsMyEmployerParamsState string

// GetJobsIdApplicationsParams defines parameters for GetJobsIdApplications.
type GetJobsIdApplicationsParams struct {
	// Limit Pagination limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Pagination offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetJobsIdInvoicesParams defines parameters for GetJobsIdInvoices.
type GetJobsIdInvoicesParams struct {
	// Limit Pagination limit
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Pagination offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// State Filter by state (Waiting, Complete)
	State *GetJobsIdInvoicesParamsState `form:"state,omitempty" json:"state,omitempty"`
}

// GetJobsIdInvoicesParamsState defines parameters for GetJobsIdInvoices.
type GetJobsIdInvoicesParamsState string

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody = DtoLoginRequest

// PostAuthLogoutJSONRequestBody defines body for PostAuthLogout for application/json ContentType.
type PostAuthLogoutJSONRequestBody = DtoRefreshRequest

// PostAuthRefreshJSONRequestBody defines body for PostAuthRefresh for application/json ContentType.
type PostAuthRefreshJSONRequestBody = DtoRefreshRequest

// PostAuthRegisterJSONRequestBody defines body for PostAuthRegister for application/json ContentType.
type PostAuthRegisterJSONRequestBody = DtoCreateUserRequest

// PostInvoicesJSONRequestBody defines body for PostInvoices for application/json ContentType.
type PostInvoicesJSONRequestBody = DtoCreateInvoiceRequest

// PatchInvoicesIdStateJSONRequestBody defines body for PatchInvoicesIdState for application/json ContentType.
type PatchInvoicesIdStateJSONRequestBody = DtoUpdateInvoiceStateRequest

// PostJobsJSONRequestBody defines body for PostJobs for application/json ContentType.
type PostJobsJSONRequestBody = DtoCreateJobRequest

// PatchJobsIdDetailsJSONRequestBody defines body for PatchJobsIdDetails for application/json ContentType.
type PatchJobsIdDetailsJSONRequestBody = DtoUpdateJobDetailsRequest

// PatchJobsIdStateJSONRequestBody defines body for PatchJobsIdState for application/json ContentType.
type PatchJobsIdStateJSONRequestBody = DtoUpdateJobStateRequest

// PutUsersIdJSONRequestBody defines body for PutUsersId for application/json ContentType.
type PutUsersIdJSONRequestBody = DtoUpdateUserRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApplicationsMy request
	GetApplicationsMy(ctx context.Context, params *GetApplicationsMyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApplicationsId request
	GetApplicationsId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApplicationsIdAccept request
	PatchApplicationsIdAccept(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApplicationsIdReject request
	PatchApplicationsIdReject(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApplicationsIdWithdraw request
	PatchApplicationsIdWithdraw(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthLoginWithBody request with any body
	PostAuthLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthLogin(ctx context.Context, body PostAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthLogoutWithBody request with any body
	PostAuthLogoutWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthLogout(ctx context.Context, body PostAuthLogoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthRefreshWithBody request with any body
	PostAuthRefreshWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthRefresh(ctx context.Context, body PostAuthRefreshJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthRegisterWithBody request with any body
	PostAuthRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthRegister(ctx context.Context, body PostAuthRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHealth request
	GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInvoicesWithBody request with any body
	PostInvoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInvoices(ctx context.Context, body PostInvoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInvoicesId request
	DeleteInvoicesId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvoicesId request
	GetInvoicesId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchInvoicesIdStateWithBody request with any body
	PatchInvoicesIdStateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchInvoicesIdState(ctx context.Context, id openapi_types.UUID, body PatchInvoicesIdStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJobsWithBody request with any body
	PostJobsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJobs(ctx context.Context, body PostJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobsAvailable request
	GetJobsAvailable(ctx context.Context, params *GetJobsAvailableParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobsMyContractor request
	GetJobsMyContractor(ctx context.Context, params *GetJobsMyContractorParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobsMyEmployer request
	GetJobsMyEmployer(ctx context.Context, params *GetJobsMyEmployerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteJobsId request
	DeleteJobsId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobsId request
	GetJobsId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobsIdApplications request
	GetJobsIdApplications(ctx context.Context, id openapi_types.UUID, params *GetJobsIdApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJobsIdApply request
	PostJobsIdApply(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchJobsIdDetailsWithBody request with any body
	PatchJobsIdDetailsWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchJobsIdDetails(ctx context.Context, id openapi_types.UUID, body PatchJobsIdDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobsIdInvoices request
	GetJobsIdInvoices(ctx context.Context, id openapi_types.UUID, params *GetJobsIdInvoicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchJobsIdStateWithBody request with any body
	PatchJobsIdStateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchJobsIdState(ctx context.Context, id openapi_types.UUID, body PatchJobsIdStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsers request
	GetUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUsersId request
	DeleteUsersId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersId request
	GetUsersId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUsersIdWithBody request with any body
	PutUsersIdWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUsersId(ctx context.Context, id openapi_types.UUID, body PutUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApplicationsMy(ctx context.Context, params *GetApplicationsMyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApplicationsMyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApplicationsId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApplicationsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApplicationsIdAccept(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApplicationsIdAcceptRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApplicationsIdReject(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApplicationsIdRejectRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApplicationsIdWithdraw(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApplicationsIdWithdrawRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthLogin(ctx context.Context, body PostAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthLogoutWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthLogoutRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthLogout(ctx context.Context, body PostAuthLogoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthLogoutRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthRefreshWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthRefreshRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthRefresh(ctx context.Context, body PostAuthRefreshJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthRefreshRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthRegisterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthRegister(ctx context.Context, body PostAuthRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthRegisterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvoicesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvoicesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvoices(ctx context.Context, body PostInvoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvoicesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInvoicesId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInvoicesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvoicesId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvoicesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchInvoicesIdStateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchInvoicesIdStateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchInvoicesIdState(ctx context.Context, id openapi_types.UUID, body PatchInvoicesIdStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchInvoicesIdStateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJobsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJobsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJobs(ctx context.Context, body PostJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJobsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobsAvailable(ctx context.Context, params *GetJobsAvailableParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobsAvailableRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobsMyContractor(ctx context.Context, params *GetJobsMyContractorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobsMyContractorRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobsMyEmployer(ctx context.Context, params *GetJobsMyEmployerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobsMyEmployerRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteJobsId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteJobsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobsId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobsIdApplications(ctx context.Context, id openapi_types.UUID, params *GetJobsIdApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobsIdApplicationsRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJobsIdApply(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJobsIdApplyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchJobsIdDetailsWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchJobsIdDetailsRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchJobsIdDetails(ctx context.Context, id openapi_types.UUID, body PatchJobsIdDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchJobsIdDetailsRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobsIdInvoices(ctx context.Context, id openapi_types.UUID, params *GetJobsIdInvoicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobsIdInvoicesRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchJobsIdStateWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchJobsIdStateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchJobsIdState(ctx context.Context, id openapi_types.UUID, body PatchJobsIdStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchJobsIdStateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUsersId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUsersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUsersIdWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUsersIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUsersId(ctx context.Context, id openapi_types.UUID, body PutUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUsersIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApplicationsMyRequest generates requests for GetApplicationsMy
func NewGetApplicationsMyRequest(server string, params *GetApplicationsMyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/my")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApplicationsIdRequest generates requests for GetApplicationsId
func NewGetApplicationsIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApplicationsIdAcceptRequest generates requests for PatchApplicationsIdAccept
func NewPatchApplicationsIdAcceptRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/accept", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApplicationsIdRejectRequest generates requests for PatchApplicationsIdReject
func NewPatchApplicationsIdRejectRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/reject", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApplicationsIdWithdrawRequest generates requests for PatchApplicationsIdWithdraw
func NewPatchApplicationsIdWithdrawRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/applications/%s/withdraw", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAuthLoginRequest calls the generic PostAuthLogin builder with application/json body
func NewPostAuthLoginRequest(server string, body PostAuthLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthLoginRequestWithBody generates requests for PostAuthLogin with any type of body
func NewPostAuthLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAuthLogoutRequest calls the generic PostAuthLogout builder with application/json body
func NewPostAuthLogoutRequest(server string, body PostAuthLogoutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthLogoutRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthLogoutRequestWithBody generates requests for PostAuthLogout with any type of body
func NewPostAuthLogoutRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAuthRefreshRequest calls the generic PostAuthRefresh builder with application/json body
func NewPostAuthRefreshRequest(server string, body PostAuthRefreshJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthRefreshRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthRefreshRequestWithBody generates requests for PostAuthRefresh with any type of body
func NewPostAuthRefreshRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/refresh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAuthRegisterRequest calls the generic PostAuthRegister builder with application/json body
func NewPostAuthRegisterRequest(server string, body PostAuthRegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthRegisterRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthRegisterRequestWithBody generates requests for PostAuthRegister with any type of body
func NewPostAuthRegisterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHealthRequest generates requests for GetHealth
func NewGetHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInvoicesRequest calls the generic PostInvoices builder with application/json body
func NewPostInvoicesRequest(server string, body PostInvoicesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInvoicesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInvoicesRequestWithBody generates requests for PostInvoices with any type of body
func NewPostInvoicesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteInvoicesIdRequest generates requests for DeleteInvoicesId
func NewDeleteInvoicesIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInvoicesIdRequest generates requests for GetInvoicesId
func NewGetInvoicesIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchInvoicesIdStateRequest calls the generic PatchInvoicesIdState builder with application/json body
func NewPatchInvoicesIdStateRequest(server string, id openapi_types.UUID, body PatchInvoicesIdStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchInvoicesIdStateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchInvoicesIdStateRequestWithBody generates requests for PatchInvoicesIdState with any type of body
func NewPatchInvoicesIdStateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s/state", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostJobsRequest calls the generic PostJobs builder with application/json body
func NewPostJobsRequest(server string, body PostJobsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJobsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostJobsRequestWithBody generates requests for PostJobs with any type of body
func NewPostJobsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJobsAvailableRequest generates requests for GetJobsAvailable
func NewGetJobsAvailableRequest(server string, params *GetJobsAvailableParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/available")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinRate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_rate", runtime.ParamLocationQuery, *params.MinRate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxRate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_rate", runtime.ParamLocationQuery, *params.MaxRate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobsMyContractorRequest generates requests for GetJobsMyContractor
func NewGetJobsMyContractorRequest(server string, params *GetJobsMyContractorParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/my/contractor")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinRate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_rate", runtime.ParamLocationQuery, *params.MinRate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxRate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_rate", runtime.ParamLocationQuery, *params.MaxRate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobsMyEmployerRequest generates requests for GetJobsMyEmployer
func NewGetJobsMyEmployerRequest(server string, params *GetJobsMyEmployerParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/my/employer")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinRate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "min_rate", runtime.ParamLocationQuery, *params.MinRate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxRate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_rate", runtime.ParamLocationQuery, *params.MaxRate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteJobsIdRequest generates requests for DeleteJobsId
func NewDeleteJobsIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobsIdRequest generates requests for GetJobsId
func NewGetJobsIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobsIdApplicationsRequest generates requests for GetJobsIdApplications
func NewGetJobsIdApplicationsRequest(server string, id openapi_types.UUID, params *GetJobsIdApplicationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/applications", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostJobsIdApplyRequest generates requests for PostJobsIdApply
func NewPostJobsIdApplyRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/apply", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchJobsIdDetailsRequest calls the generic PatchJobsIdDetails builder with application/json body
func NewPatchJobsIdDetailsRequest(server string, id openapi_types.UUID, body PatchJobsIdDetailsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchJobsIdDetailsRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchJobsIdDetailsRequestWithBody generates requests for PatchJobsIdDetails with any type of body
func NewPatchJobsIdDetailsRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/details", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJobsIdInvoicesRequest generates requests for GetJobsIdInvoices
func NewGetJobsIdInvoicesRequest(server string, id openapi_types.UUID, params *GetJobsIdInvoicesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/invoices", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchJobsIdStateRequest calls the generic PatchJobsIdState builder with application/json body
func NewPatchJobsIdStateRequest(server string, id openapi_types.UUID, body PatchJobsIdStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchJobsIdStateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchJobsIdStateRequestWithBody generates requests for PatchJobsIdState with any type of body
func NewPatchJobsIdStateRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/state", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersRequest generates requests for GetUsers
func NewGetUsersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUsersIdRequest generates requests for DeleteUsersId
func NewDeleteUsersIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersIdRequest generates requests for GetUsersId
func NewGetUsersIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutUsersIdRequest calls the generic PutUsersId builder with application/json body
func NewPutUsersIdRequest(server string, id openapi_types.UUID, body PutUsersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUsersIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutUsersIdRequestWithBody generates requests for PutUsersId with any type of body
func NewPutUsersIdRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApplicationsMyWithResponse request
	GetApplicationsMyWithResponse(ctx context.Context, params *GetApplicationsMyParams, reqEditors ...RequestEditorFn) (*GetApplicationsMyResponse, error)

	// GetApplicationsIdWithResponse request
	GetApplicationsIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApplicationsIdResponse, error)

	// PatchApplicationsIdAcceptWithResponse request
	PatchApplicationsIdAcceptWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PatchApplicationsIdAcceptResponse, error)

	// PatchApplicationsIdRejectWithResponse request
	PatchApplicationsIdRejectWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PatchApplicationsIdRejectResponse, error)

	// PatchApplicationsIdWithdrawWithResponse request
	PatchApplicationsIdWithdrawWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PatchApplicationsIdWithdrawResponse, error)

	// PostAuthLoginWithBodyWithResponse request with any body
	PostAuthLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthLoginResponse, error)

	PostAuthLoginWithResponse(ctx context.Context, body PostAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthLoginResponse, error)

	// PostAuthLogoutWithBodyWithResponse request with any body
	PostAuthLogoutWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthLogoutResponse, error)

	PostAuthLogoutWithResponse(ctx context.Context, body PostAuthLogoutJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthLogoutResponse, error)

	// PostAuthRefreshWithBodyWithResponse request with any body
	PostAuthRefreshWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthRefreshResponse, error)

	PostAuthRefreshWithResponse(ctx context.Context, body PostAuthRefreshJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthRefreshResponse, error)

	// PostAuthRegisterWithBodyWithResponse request with any body
	PostAuthRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthRegisterResponse, error)

	PostAuthRegisterWithResponse(ctx context.Context, body PostAuthRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthRegisterResponse, error)

	// GetHealthWithResponse request
	GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error)

	// PostInvoicesWithBodyWithResponse request with any body
	PostInvoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInvoicesResponse, error)

	PostInvoicesWithResponse(ctx context.Context, body PostInvoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInvoicesResponse, error)

	// DeleteInvoicesIdWithResponse request
	DeleteInvoicesIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteInvoicesIdResponse, error)

	// GetInvoicesIdWithResponse request
	GetInvoicesIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetInvoicesIdResponse, error)

	// PatchInvoicesIdStateWithBodyWithResponse request with any body
	PatchInvoicesIdStateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchInvoicesIdStateResponse, error)

	PatchInvoicesIdStateWithResponse(ctx context.Context, id openapi_types.UUID, body PatchInvoicesIdStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchInvoicesIdStateResponse, error)

	// PostJobsWithBodyWithResponse request with any body
	PostJobsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJobsResponse, error)

	PostJobsWithResponse(ctx context.Context, body PostJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJobsResponse, error)

	// GetJobsAvailableWithResponse request
	GetJobsAvailableWithResponse(ctx context.Context, params *GetJobsAvailableParams, reqEditors ...RequestEditorFn) (*GetJobsAvailableResponse, error)

	// GetJobsMyContractorWithResponse request
	GetJobsMyContractorWithResponse(ctx context.Context, params *GetJobsMyContractorParams, reqEditors ...RequestEditorFn) (*GetJobsMyContractorResponse, error)

	// GetJobsMyEmployerWithResponse request
	GetJobsMyEmployerWithResponse(ctx context.Context, params *GetJobsMyEmployerParams, reqEditors ...RequestEditorFn) (*GetJobsMyEmployerResponse, error)

	// DeleteJobsIdWithResponse request
	DeleteJobsIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteJobsIdResponse, error)

	// GetJobsIdWithResponse request
	GetJobsIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetJobsIdResponse, error)

	// GetJobsIdApplicationsWithResponse request
	GetJobsIdApplicationsWithResponse(ctx context.Context, id openapi_types.UUID, params *GetJobsIdApplicationsParams, reqEditors ...RequestEditorFn) (*GetJobsIdApplicationsResponse, error)

	// PostJobsIdApplyWithResponse request
	PostJobsIdApplyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostJobsIdApplyResponse, error)

	// PatchJobsIdDetailsWithBodyWithResponse request with any body
	PatchJobsIdDetailsWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchJobsIdDetailsResponse, error)

	PatchJobsIdDetailsWithResponse(ctx context.Context, id openapi_types.UUID, body PatchJobsIdDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchJobsIdDetailsResponse, error)

	// GetJobsIdInvoicesWithResponse request
	GetJobsIdInvoicesWithResponse(ctx context.Context, id openapi_types.UUID, params *GetJobsIdInvoicesParams, reqEditors ...RequestEditorFn) (*GetJobsIdInvoicesResponse, error)

	// PatchJobsIdStateWithBodyWithResponse request with any body
	PatchJobsIdStateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchJobsIdStateResponse, error)

	PatchJobsIdStateWithResponse(ctx context.Context, id openapi_types.UUID, body PatchJobsIdStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchJobsIdStateResponse, error)

	// GetUsersWithResponse request
	GetUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	// DeleteUsersIdWithResponse request
	DeleteUsersIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteUsersIdResponse, error)

	// GetUsersIdWithResponse request
	GetUsersIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetUsersIdResponse, error)

	// PutUsersIdWithBodyWithResponse request with any body
	PutUsersIdWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUsersIdResponse, error)

	PutUsersIdWithResponse(ctx context.Context, id openapi_types.UUID, body PutUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUsersIdResponse, error)
}

type GetApplicationsMyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DtoJobApplicationResponse
	JSON400      *map[string]string
	JSON401      *map[string]string
	JSON500      *map[string]string
}

// Status returns HTTPResponse.Status
func (r GetApplicationsMyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApplicationsMyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApplicationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DtoJobApplicationResponse
	JSON400      *map[string]string
	JSON401      *map[string]string
	JSON403      *map[string]string
	JSON404      *map[string]string
	JSON500      *map[string]string
}

// Status returns HTTPResponse.Status
func (r GetApplicationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApplicationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApplicationsIdAcceptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DtoJobResponse
	JSON400      *map[string]string
	JSON401      *map[string]string
	JSON403      *map[string]string
	JSON404      *map[string]string
	JSON409      *map[string]string
	JSON500      *map[string]string
}

// Status returns HTTPResponse.Status
func (r PatchApplicationsIdAcceptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApplicationsIdAcceptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApplicationsIdRejectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DtoJobApplicationResponse
	JSON400      *map[string]string
	JSON401      *map[string]string
	JSON403      *map[string]string
	JSON404      *map[string]string
	JSON409      *map[string]string
	JSON500      *map[string]string
}

// Status returns HTTPResponse.Status
func (r PatchApplicationsIdRejectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApplicationsIdRejectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApplicationsIdWithdrawResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DtoJobApplicationResponse
	JSON400      *map[string]string
	JSON401      *map[string]string
	JSON403      *map[string]string
	JSON404      *map[string]string
	JSON409      *map[string]string
	JSON500      *map[string]string
}

// Status returns HTTPResponse.Status
func (r PatchApplicationsIdWithdrawResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApplicationsIdWithdrawResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DtoLoginResponse
	JSON400      *map[string]string
	JSON401      *map[string]string
	JSON500      *map[string]string
}

// Status returns HTTPResponse.Status
func (r PostAuthLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *map[string]string
	JSON500      *map[string]string
}

// Status returns HTTPResponse.Status
func (r PostAuthLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthRefreshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DtoRefreshResponse
	JSON400      *map[string]string
	JSON401      *map[string]string
	JSON500      *map[string]string
}

// Status returns HTTPResponse.Status
func (r PostAuthRefreshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthRefreshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthRegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DtoUserResponse
	JSON400      *map[string]string
	JSON409      *map[string]string
	JSON500      *map[string]string
}

// Status returns HTTPResponse.Status
func (r PostAuthRegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthRegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]string
}

// Status returns HTTPResponse.Status
func (r GetHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInvoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DtoInvoiceResponse
	JSON400      *map[string]string
	JSON401      *map[string]string
	JSON403      *map[string]string
	JSON409      *map[string]string
	JSON500      *map[string]string
}

// Status returns HTTPResponse.Status
func (r PostInvoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInvoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInvoicesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *map[string]string
	JSON401      *map[string]string
	JSON403      *map[string]string
	JSON404      *map[string]string
	JSON500      *map[string]string
}

// Status returns HTTPResponse.Status
func (r DeleteInvoicesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInvoicesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvoicesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DtoInvoiceResponse
	JSON400      *map[string]string
	JSON401      *map[string]string
	JSON403      *map[string]string
	JSON404      *map[string]string
	JSON500      *map[string]string
}

// Status returns HTTPResponse.Status
func (r GetInvoicesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvoicesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchInvoicesIdStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DtoInvoiceResponse
	JSON400      *map[string]string
	JSON401      *map[string]string
	JSON403      *map[string]string
	JSON404      *map[string]string
	JSON500      *map[string]string
}

// Status returns HTTPResponse.Status
func (r PatchInvoicesIdStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchInvoicesIdStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DtoJobResponse
	JSON400      *map[string]string
	JSON401      *map[string]string
	JSON500      *map[string]string
}

// Status returns HTTPResponse.Status
func (r PostJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobsAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DtoJobResponse
	JSON400      *map[string]string
	JSON401      *map[string]string
	JSON500      *map[string]string
}

// Status returns HTTPResponse.Status
func (r GetJobsAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobsAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobsMyContractorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DtoJobResponse
	JSON400      *map[string]string
	JSON401      *map[string]string
	JSON500      *map[string]string
}

// Status returns HTTPResponse.Status
func (r GetJobsMyContractorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobsMyContractorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobsMyEmployerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DtoJobResponse
	JSON400      *map[string]string
	JSON401      *map[string]string
	JSON500      *map[string]string
}

// Status returns HTTPResponse.Status
func (r GetJobsMyEmployerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobsMyEmployerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteJobsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *map[string]string
	JSON401      *map[string]string
	JSON403      *map[string]string
	JSON404      *map[string]string
	JSON500      *map[string]string
}

// Status returns HTTPResponse.Status
func (r DeleteJobsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteJobsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DtoJobResponse
	JSON400      *map[string]string
	JSON401      *map[string]string
	JSON404      *map[string]string
	JSON500      *map[string]string
}

// Status returns HTTPResponse.Status
func (r GetJobsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobsIdApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DtoJobApplicationResponse
	JSON400      *map[string]string
	JSON401      *map[string]string
	JSON403      *map[string]string
	JSON404      *map[string]string
	JSON500      *map[string]string
}

// Status returns HTTPResponse.Status
func (r GetJobsIdApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobsIdApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJobsIdApplyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DtoJobApplicationResponse
	JSON400      *map[string]string
	JSON401      *map[string]string
	JSON403      *map[string]string
	JSON404      *map[string]string
	JSON500      *map[string]string
}

// Status returns HTTPResponse.Status
func (r PostJobsIdApplyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJobsIdApplyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchJobsIdDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DtoJobResponse
	JSON400      *map[string]string
	JSON401      *map[string]string
	JSON403      *map[string]string
	JSON404      *map[string]string
	JSON500      *map[string]string
}

// Status returns HTTPResponse.Status
func (r PatchJobsIdDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchJobsIdDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobsIdInvoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DtoInvoiceResponse
	JSON400      *map[string]string
	JSON401      *map[string]string
	JSON403      *map[string]string
	JSON404      *map[string]string
	JSON500      *map[string]string
}

// Status returns HTTPResponse.Status
func (r GetJobsIdInvoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobsIdInvoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchJobsIdStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DtoJobResponse
	JSON400      *map[string]string
	JSON401      *map[string]string
	JSON403      *map[string]string
	JSON404      *map[string]string
	JSON500      *map[string]string
}

// Status returns HTTPResponse.Status
func (r PatchJobsIdStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchJobsIdStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DtoUserResponse
	JSON500      *map[string]string
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *map[string]string
	JSON401      *map[string]string
	JSON403      *map[string]string
	JSON404      *map[string]string
	JSON500      *map[string]string
}

// Status returns HTTPResponse.Status
func (r DeleteUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DtoUserResponse
	JSON400      *map[string]string
	JSON404      *map[string]string
	JSON500      *map[string]string
}

// Status returns HTTPResponse.Status
func (r GetUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DtoUserResponse
	JSON400      *map[string]string
	JSON401      *map[string]string
	JSON403      *map[string]string
	JSON404      *map[string]string
	JSON409      *map[string]string
	JSON500      *map[string]string
}

// Status returns HTTPResponse.Status
func (r PutUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApplicationsMyWithResponse request returning *GetApplicationsMyResponse
func (c *ClientWithResponses) GetApplicationsMyWithResponse(ctx context.Context, params *GetApplicationsMyParams, reqEditors ...RequestEditorFn) (*GetApplicationsMyResponse, error) {
	rsp, err := c.GetApplicationsMy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApplicationsMyResponse(rsp)
}

// GetApplicationsIdWithResponse request returning *GetApplicationsIdResponse
func (c *ClientWithResponses) GetApplicationsIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApplicationsIdResponse, error) {
	rsp, err := c.GetApplicationsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApplicationsIdResponse(rsp)
}

// PatchApplicationsIdAcceptWithResponse request returning *PatchApplicationsIdAcceptResponse
func (c *ClientWithResponses) PatchApplicationsIdAcceptWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PatchApplicationsIdAcceptResponse, error) {
	rsp, err := c.PatchApplicationsIdAccept(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApplicationsIdAcceptResponse(rsp)
}

// PatchApplicationsIdRejectWithResponse request returning *PatchApplicationsIdRejectResponse
func (c *ClientWithResponses) PatchApplicationsIdRejectWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PatchApplicationsIdRejectResponse, error) {
	rsp, err := c.PatchApplicationsIdReject(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApplicationsIdRejectResponse(rsp)
}

// PatchApplicationsIdWithdrawWithResponse request returning *PatchApplicationsIdWithdrawResponse
func (c *ClientWithResponses) PatchApplicationsIdWithdrawWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PatchApplicationsIdWithdrawResponse, error) {
	rsp, err := c.PatchApplicationsIdWithdraw(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApplicationsIdWithdrawResponse(rsp)
}

// PostAuthLoginWithBodyWithResponse request with arbitrary body returning *PostAuthLoginResponse
func (c *ClientWithResponses) PostAuthLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthLoginResponse, error) {
	rsp, err := c.PostAuthLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthLoginResponse(rsp)
}

func (c *ClientWithResponses) PostAuthLoginWithResponse(ctx context.Context, body PostAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthLoginResponse, error) {
	rsp, err := c.PostAuthLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthLoginResponse(rsp)
}

// PostAuthLogoutWithBodyWithResponse request with arbitrary body returning *PostAuthLogoutResponse
func (c *ClientWithResponses) PostAuthLogoutWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthLogoutResponse, error) {
	rsp, err := c.PostAuthLogoutWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthLogoutResponse(rsp)
}

func (c *ClientWithResponses) PostAuthLogoutWithResponse(ctx context.Context, body PostAuthLogoutJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthLogoutResponse, error) {
	rsp, err := c.PostAuthLogout(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthLogoutResponse(rsp)
}

// PostAuthRefreshWithBodyWithResponse request with arbitrary body returning *PostAuthRefreshResponse
func (c *ClientWithResponses) PostAuthRefreshWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthRefreshResponse, error) {
	rsp, err := c.PostAuthRefreshWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthRefreshResponse(rsp)
}

func (c *ClientWithResponses) PostAuthRefreshWithResponse(ctx context.Context, body PostAuthRefreshJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthRefreshResponse, error) {
	rsp, err := c.PostAuthRefresh(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthRefreshResponse(rsp)
}

// PostAuthRegisterWithBodyWithResponse request with arbitrary body returning *PostAuthRegisterResponse
func (c *ClientWithResponses) PostAuthRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthRegisterResponse, error) {
	rsp, err := c.PostAuthRegisterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthRegisterResponse(rsp)
}

func (c *ClientWithResponses) PostAuthRegisterWithResponse(ctx context.Context, body PostAuthRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthRegisterResponse, error) {
	rsp, err := c.PostAuthRegister(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthRegisterResponse(rsp)
}

// GetHealthWithResponse request returning *GetHealthResponse
func (c *ClientWithResponses) GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error) {
	rsp, err := c.GetHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthResponse(rsp)
}

// PostInvoicesWithBodyWithResponse request with arbitrary body returning *PostInvoicesResponse
func (c *ClientWithResponses) PostInvoicesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInvoicesResponse, error) {
	rsp, err := c.PostInvoicesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvoicesResponse(rsp)
}

func (c *ClientWithResponses) PostInvoicesWithResponse(ctx context.Context, body PostInvoicesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInvoicesResponse, error) {
	rsp, err := c.PostInvoices(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvoicesResponse(rsp)
}

// DeleteInvoicesIdWithResponse request returning *DeleteInvoicesIdResponse
func (c *ClientWithResponses) DeleteInvoicesIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteInvoicesIdResponse, error) {
	rsp, err := c.DeleteInvoicesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInvoicesIdResponse(rsp)
}

// GetInvoicesIdWithResponse request returning *GetInvoicesIdResponse
func (c *ClientWithResponses) GetInvoicesIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetInvoicesIdResponse, error) {
	rsp, err := c.GetInvoicesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvoicesIdResponse(rsp)
}

// PatchInvoicesIdStateWithBodyWithResponse request with arbitrary body returning *PatchInvoicesIdStateResponse
func (c *ClientWithResponses) PatchInvoicesIdStateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchInvoicesIdStateResponse, error) {
	rsp, err := c.PatchInvoicesIdStateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchInvoicesIdStateResponse(rsp)
}

func (c *ClientWithResponses) PatchInvoicesIdStateWithResponse(ctx context.Context, id openapi_types.UUID, body PatchInvoicesIdStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchInvoicesIdStateResponse, error) {
	rsp, err := c.PatchInvoicesIdState(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchInvoicesIdStateResponse(rsp)
}

// PostJobsWithBodyWithResponse request with arbitrary body returning *PostJobsResponse
func (c *ClientWithResponses) PostJobsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJobsResponse, error) {
	rsp, err := c.PostJobsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJobsResponse(rsp)
}

func (c *ClientWithResponses) PostJobsWithResponse(ctx context.Context, body PostJobsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJobsResponse, error) {
	rsp, err := c.PostJobs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJobsResponse(rsp)
}

// GetJobsAvailableWithResponse request returning *GetJobsAvailableResponse
func (c *ClientWithResponses) GetJobsAvailableWithResponse(ctx context.Context, params *GetJobsAvailableParams, reqEditors ...RequestEditorFn) (*GetJobsAvailableResponse, error) {
	rsp, err := c.GetJobsAvailable(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobsAvailableResponse(rsp)
}

// GetJobsMyContractorWithResponse request returning *GetJobsMyContractorResponse
func (c *ClientWithResponses) GetJobsMyContractorWithResponse(ctx context.Context, params *GetJobsMyContractorParams, reqEditors ...RequestEditorFn) (*GetJobsMyContractorResponse, error) {
	rsp, err := c.GetJobsMyContractor(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobsMyContractorResponse(rsp)
}

// GetJobsMyEmployerWithResponse request returning *GetJobsMyEmployerResponse
func (c *ClientWithResponses) GetJobsMyEmployerWithResponse(ctx context.Context, params *GetJobsMyEmployerParams, reqEditors ...RequestEditorFn) (*GetJobsMyEmployerResponse, error) {
	rsp, err := c.GetJobsMyEmployer(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobsMyEmployerResponse(rsp)
}

// DeleteJobsIdWithResponse request returning *DeleteJobsIdResponse
func (c *ClientWithResponses) DeleteJobsIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteJobsIdResponse, error) {
	rsp, err := c.DeleteJobsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteJobsIdResponse(rsp)
}

// GetJobsIdWithResponse request returning *GetJobsIdResponse
func (c *ClientWithResponses) GetJobsIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetJobsIdResponse, error) {
	rsp, err := c.GetJobsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobsIdResponse(rsp)
}

// GetJobsIdApplicationsWithResponse request returning *GetJobsIdApplicationsResponse
func (c *ClientWithResponses) GetJobsIdApplicationsWithResponse(ctx context.Context, id openapi_types.UUID, params *GetJobsIdApplicationsParams, reqEditors ...RequestEditorFn) (*GetJobsIdApplicationsResponse, error) {
	rsp, err := c.GetJobsIdApplications(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobsIdApplicationsResponse(rsp)
}

// PostJobsIdApplyWithResponse request returning *PostJobsIdApplyResponse
func (c *ClientWithResponses) PostJobsIdApplyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*PostJobsIdApplyResponse, error) {
	rsp, err := c.PostJobsIdApply(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJobsIdApplyResponse(rsp)
}

// PatchJobsIdDetailsWithBodyWithResponse request with arbitrary body returning *PatchJobsIdDetailsResponse
func (c *ClientWithResponses) PatchJobsIdDetailsWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchJobsIdDetailsResponse, error) {
	rsp, err := c.PatchJobsIdDetailsWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchJobsIdDetailsResponse(rsp)
}

func (c *ClientWithResponses) PatchJobsIdDetailsWithResponse(ctx context.Context, id openapi_types.UUID, body PatchJobsIdDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchJobsIdDetailsResponse, error) {
	rsp, err := c.PatchJobsIdDetails(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchJobsIdDetailsResponse(rsp)
}

// GetJobsIdInvoicesWithResponse request returning *GetJobsIdInvoicesResponse
func (c *ClientWithResponses) GetJobsIdInvoicesWithResponse(ctx context.Context, id openapi_types.UUID, params *GetJobsIdInvoicesParams, reqEditors ...RequestEditorFn) (*GetJobsIdInvoicesResponse, error) {
	rsp, err := c.GetJobsIdInvoices(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobsIdInvoicesResponse(rsp)
}

// PatchJobsIdStateWithBodyWithResponse request with arbitrary body returning *PatchJobsIdStateResponse
func (c *ClientWithResponses) PatchJobsIdStateWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchJobsIdStateResponse, error) {
	rsp, err := c.PatchJobsIdStateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchJobsIdStateResponse(rsp)
}

func (c *ClientWithResponses) PatchJobsIdStateWithResponse(ctx context.Context, id openapi_types.UUID, body PatchJobsIdStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchJobsIdStateResponse, error) {
	rsp, err := c.PatchJobsIdState(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchJobsIdStateResponse(rsp)
}

// GetUsersWithResponse request returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// DeleteUsersIdWithResponse request returning *DeleteUsersIdResponse
func (c *ClientWithResponses) DeleteUsersIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteUsersIdResponse, error) {
	rsp, err := c.DeleteUsersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUsersIdResponse(rsp)
}

// GetUsersIdWithResponse request returning *GetUsersIdResponse
func (c *ClientWithResponses) GetUsersIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetUsersIdResponse, error) {
	rsp, err := c.GetUsersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersIdResponse(rsp)
}

// PutUsersIdWithBodyWithResponse request with arbitrary body returning *PutUsersIdResponse
func (c *ClientWithResponses) PutUsersIdWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUsersIdResponse, error) {
	rsp, err := c.PutUsersIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUsersIdResponse(rsp)
}

func (c *ClientWithResponses) PutUsersIdWithResponse(ctx context.Context, id openapi_types.UUID, body PutUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUsersIdResponse, error) {
	rsp, err := c.PutUsersId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUsersIdResponse(rsp)
}

// ParseGetApplicationsMyResponse parses an HTTP response from a GetApplicationsMyWithResponse call
func ParseGetApplicationsMyResponse(rsp *http.Response) (*GetApplicationsMyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApplicationsMyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DtoJobApplicationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApplicationsIdResponse parses an HTTP response from a GetApplicationsIdWithResponse call
func ParseGetApplicationsIdResponse(rsp *http.Response) (*GetApplicationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApplicationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DtoJobApplicationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchApplicationsIdAcceptResponse parses an HTTP response from a PatchApplicationsIdAcceptWithResponse call
func ParsePatchApplicationsIdAcceptResponse(rsp *http.Response) (*PatchApplicationsIdAcceptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApplicationsIdAcceptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DtoJobResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchApplicationsIdRejectResponse parses an HTTP response from a PatchApplicationsIdRejectWithResponse call
func ParsePatchApplicationsIdRejectResponse(rsp *http.Response) (*PatchApplicationsIdRejectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApplicationsIdRejectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DtoJobApplicationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchApplicationsIdWithdrawResponse parses an HTTP response from a PatchApplicationsIdWithdrawWithResponse call
func ParsePatchApplicationsIdWithdrawResponse(rsp *http.Response) (*PatchApplicationsIdWithdrawResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApplicationsIdWithdrawResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DtoJobApplicationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostAuthLoginResponse parses an HTTP response from a PostAuthLoginWithResponse call
func ParsePostAuthLoginResponse(rsp *http.Response) (*PostAuthLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DtoLoginResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostAuthLogoutResponse parses an HTTP response from a PostAuthLogoutWithResponse call
func ParsePostAuthLogoutResponse(rsp *http.Response) (*PostAuthLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostAuthRefreshResponse parses an HTTP response from a PostAuthRefreshWithResponse call
func ParsePostAuthRefreshResponse(rsp *http.Response) (*PostAuthRefreshResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthRefreshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DtoRefreshResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostAuthRegisterResponse parses an HTTP response from a PostAuthRegisterWithResponse call
func ParsePostAuthRegisterResponse(rsp *http.Response) (*PostAuthRegisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthRegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DtoUserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetHealthResponse parses an HTTP response from a GetHealthWithResponse call
func ParseGetHealthResponse(rsp *http.Response) (*GetHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostInvoicesResponse parses an HTTP response from a PostInvoicesWithResponse call
func ParsePostInvoicesResponse(rsp *http.Response) (*PostInvoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInvoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DtoInvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteInvoicesIdResponse parses an HTTP response from a DeleteInvoicesIdWithResponse call
func ParseDeleteInvoicesIdResponse(rsp *http.Response) (*DeleteInvoicesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInvoicesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetInvoicesIdResponse parses an HTTP response from a GetInvoicesIdWithResponse call
func ParseGetInvoicesIdResponse(rsp *http.Response) (*GetInvoicesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvoicesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DtoInvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchInvoicesIdStateResponse parses an HTTP response from a PatchInvoicesIdStateWithResponse call
func ParsePatchInvoicesIdStateResponse(rsp *http.Response) (*PatchInvoicesIdStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchInvoicesIdStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DtoInvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostJobsResponse parses an HTTP response from a PostJobsWithResponse call
func ParsePostJobsResponse(rsp *http.Response) (*PostJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DtoJobResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetJobsAvailableResponse parses an HTTP response from a GetJobsAvailableWithResponse call
func ParseGetJobsAvailableResponse(rsp *http.Response) (*GetJobsAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobsAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DtoJobResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetJobsMyContractorResponse parses an HTTP response from a GetJobsMyContractorWithResponse call
func ParseGetJobsMyContractorResponse(rsp *http.Response) (*GetJobsMyContractorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobsMyContractorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DtoJobResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetJobsMyEmployerResponse parses an HTTP response from a GetJobsMyEmployerWithResponse call
func ParseGetJobsMyEmployerResponse(rsp *http.Response) (*GetJobsMyEmployerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobsMyEmployerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DtoJobResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteJobsIdResponse parses an HTTP response from a DeleteJobsIdWithResponse call
func ParseDeleteJobsIdResponse(rsp *http.Response) (*DeleteJobsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteJobsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetJobsIdResponse parses an HTTP response from a GetJobsIdWithResponse call
func ParseGetJobsIdResponse(rsp *http.Response) (*GetJobsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DtoJobResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetJobsIdApplicationsResponse parses an HTTP response from a GetJobsIdApplicationsWithResponse call
func ParseGetJobsIdApplicationsResponse(rsp *http.Response) (*GetJobsIdApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobsIdApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DtoJobApplicationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostJobsIdApplyResponse parses an HTTP response from a PostJobsIdApplyWithResponse call
func ParsePostJobsIdApplyResponse(rsp *http.Response) (*PostJobsIdApplyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJobsIdApplyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DtoJobApplicationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchJobsIdDetailsResponse parses an HTTP response from a PatchJobsIdDetailsWithResponse call
func ParsePatchJobsIdDetailsResponse(rsp *http.Response) (*PatchJobsIdDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchJobsIdDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DtoJobResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetJobsIdInvoicesResponse parses an HTTP response from a GetJobsIdInvoicesWithResponse call
func ParseGetJobsIdInvoicesResponse(rsp *http.Response) (*GetJobsIdInvoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobsIdInvoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DtoInvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchJobsIdStateResponse parses an HTTP response from a PatchJobsIdStateWithResponse call
func ParsePatchJobsIdStateResponse(rsp *http.Response) (*PatchJobsIdStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchJobsIdStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DtoJobResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DtoUserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteUsersIdResponse parses an HTTP response from a DeleteUsersIdWithResponse call
func ParseDeleteUsersIdResponse(rsp *http.Response) (*DeleteUsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUsersIdResponse parses an HTTP response from a GetUsersIdWithResponse call
func ParseGetUsersIdResponse(rsp *http.Response) (*GetUsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DtoUserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutUsersIdResponse parses an HTTP response from a PutUsersIdWithResponse call
func ParsePutUsersIdResponse(rsp *http.Response) (*PutUsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DtoUserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List applications submitted by the authenticated user
	// (GET /applications/my)
	GetApplicationsMy(c *gin.Context, params GetApplicationsMyParams)
	// Get a job application by ID
	// (GET /applications/{id})
	GetApplicationsId(c *gin.Context, id openapi_types.UUID)
	// Accept a job application
	// (PATCH /applications/{id}/accept)
	PatchApplicationsIdAccept(c *gin.Context, id openapi_types.UUID)
	// Reject a job application
	// (PATCH /applications/{id}/reject)
	PatchApplicationsIdReject(c *gin.Context, id openapi_types.UUID)
	// Withdraw a job application
	// (PATCH /applications/{id}/withdraw)
	PatchApplicationsIdWithdraw(c *gin.Context, id openapi_types.UUID)
	// Log in a user
	// (POST /auth/login)
	PostAuthLogin(c *gin.Context)
	// Log out user
	// (POST /auth/logout)
	PostAuthLogout(c *gin.Context)
	// Refresh access token
	// (POST /auth/refresh)
	PostAuthRefresh(c *gin.Context)
	// Register a new user
	// (POST /auth/register)
	PostAuthRegister(c *gin.Context)
	// Health check
	// (GET /health)
	GetHealth(c *gin.Context)
	// Create an invoice for a job
	// (POST /invoices)
	PostInvoices(c *gin.Context)
	// Delete an invoice
	// (DELETE /invoices/{id})
	DeleteInvoicesId(c *gin.Context, id openapi_types.UUID)
	// Get an invoice by ID
	// (GET /invoices/{id})
	GetInvoicesId(c *gin.Context, id openapi_types.UUID)
	// Update invoice state
	// (PATCH /invoices/{id}/state)
	PatchInvoicesIdState(c *gin.Context, id openapi_types.UUID)
	// Create a new job posting
	// (POST /jobs)
	PostJobs(c *gin.Context)
	// List available jobs
	// (GET /jobs/available)
	GetJobsAvailable(c *gin.Context, params GetJobsAvailableParams)
	// List jobs taken by the authenticated contractor
	// (GET /jobs/my/contractor)
	GetJobsMyContractor(c *gin.Context, params GetJobsMyContractorParams)
	// List jobs posted by the authenticated employer
	// (GET /jobs/my/employer)
	GetJobsMyEmployer(c *gin.Context, params GetJobsMyEmployerParams)
	// Delete a job
	// (DELETE /jobs/{id})
	DeleteJobsId(c *gin.Context, id openapi_types.UUID)
	// Get a job by ID
	// (GET /jobs/{id})
	GetJobsId(c *gin.Context, id openapi_types.UUID)
	// List applications for a specific job
	// (GET /jobs/{id}/applications)
	GetJobsIdApplications(c *gin.Context, id openapi_types.UUID, params GetJobsIdApplicationsParams)
	// Apply for a job
	// (POST /jobs/{id}/apply)
	PostJobsIdApply(c *gin.Context, id openapi_types.UUID)
	// Update job rate or duration
	// (PATCH /jobs/{id}/details)
	PatchJobsIdDetails(c *gin.Context, id openapi_types.UUID)
	// List invoices for a specific job
	// (GET /jobs/{id}/invoices)
	GetJobsIdInvoices(c *gin.Context, id openapi_types.UUID, params GetJobsIdInvoicesParams)
	// Update job state
	// (PATCH /jobs/{id}/state)
	PatchJobsIdState(c *gin.Context, id openapi_types.UUID)
	// List all users
	// (GET /users)
	GetUsers(c *gin.Context)
	// Delete a user by ID
	// (DELETE /users/{id})
	DeleteUsersId(c *gin.Context, id openapi_types.UUID)
	// Get a user by ID
	// (GET /users/{id})
	GetUsersId(c *gin.Context, id openapi_types.UUID)
	// Update an existing user
	// (PUT /users/{id})
	PutUsersId(c *gin.Context, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApplicationsMy operation middleware
func (siw *ServerInterfaceWrapper) GetApplicationsMy(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationsMyParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApplicationsMy(c, params)
}

// GetApplicationsId operation middleware
func (siw *ServerInterfaceWrapper) GetApplicationsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApplicationsId(c, id)
}

// PatchApplicationsIdAccept operation middleware
func (siw *ServerInterfaceWrapper) PatchApplicationsIdAccept(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchApplicationsIdAccept(c, id)
}

// PatchApplicationsIdReject operation middleware
func (siw *ServerInterfaceWrapper) PatchApplicationsIdReject(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchApplicationsIdReject(c, id)
}

// PatchApplicationsIdWithdraw operation middleware
func (siw *ServerInterfaceWrapper) PatchApplicationsIdWithdraw(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchApplicationsIdWithdraw(c, id)
}

// PostAuthLogin operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthLogin(c)
}

// PostAuthLogout operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogout(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthLogout(c)
}

// PostAuthRefresh operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRefresh(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthRefresh(c)
}

// PostAuthRegister operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRegister(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthRegister(c)
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealth(c)
}

// PostInvoices operation middleware
func (siw *ServerInterfaceWrapper) PostInvoices(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostInvoices(c)
}

// DeleteInvoicesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteInvoicesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteInvoicesId(c, id)
}

// GetInvoicesId operation middleware
func (siw *ServerInterfaceWrapper) GetInvoicesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetInvoicesId(c, id)
}

// PatchInvoicesIdState operation middleware
func (siw *ServerInterfaceWrapper) PatchInvoicesIdState(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchInvoicesIdState(c, id)
}

// PostJobs operation middleware
func (siw *ServerInterfaceWrapper) PostJobs(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostJobs(c)
}

// GetJobsAvailable operation middleware
func (siw *ServerInterfaceWrapper) GetJobsAvailable(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJobsAvailableParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "min_rate" -------------

	err = runtime.BindQueryParameter("form", true, false, "min_rate", c.Request.URL.Query(), &params.MinRate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter min_rate: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "max_rate" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_rate", c.Request.URL.Query(), &params.MaxRate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter max_rate: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetJobsAvailable(c, params)
}

// GetJobsMyContractor operation middleware
func (siw *ServerInterfaceWrapper) GetJobsMyContractor(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJobsMyContractorParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter state: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "min_rate" -------------

	err = runtime.BindQueryParameter("form", true, false, "min_rate", c.Request.URL.Query(), &params.MinRate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter min_rate: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "max_rate" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_rate", c.Request.URL.Query(), &params.MaxRate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter max_rate: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetJobsMyContractor(c, params)
}

// GetJobsMyEmployer operation middleware
func (siw *ServerInterfaceWrapper) GetJobsMyEmployer(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJobsMyEmployerParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter state: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "min_rate" -------------

	err = runtime.BindQueryParameter("form", true, false, "min_rate", c.Request.URL.Query(), &params.MinRate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter min_rate: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "max_rate" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_rate", c.Request.URL.Query(), &params.MaxRate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter max_rate: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetJobsMyEmployer(c, params)
}

// DeleteJobsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteJobsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteJobsId(c, id)
}

// GetJobsId operation middleware
func (siw *ServerInterfaceWrapper) GetJobsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetJobsId(c, id)
}

// GetJobsIdApplications operation middleware
func (siw *ServerInterfaceWrapper) GetJobsIdApplications(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJobsIdApplicationsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetJobsIdApplications(c, id, params)
}

// PostJobsIdApply operation middleware
func (siw *ServerInterfaceWrapper) PostJobsIdApply(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostJobsIdApply(c, id)
}

// PatchJobsIdDetails operation middleware
func (siw *ServerInterfaceWrapper) PatchJobsIdDetails(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchJobsIdDetails(c, id)
}

// GetJobsIdInvoices operation middleware
func (siw *ServerInterfaceWrapper) GetJobsIdInvoices(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJobsIdInvoicesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter state: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetJobsIdInvoices(c, id, params)
}

// PatchJobsIdState operation middleware
func (siw *ServerInterfaceWrapper) PatchJobsIdState(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchJobsIdState(c, id)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsers(c)
}

// DeleteUsersId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUsersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUsersId(c, id)
}

// GetUsersId operation middleware
func (siw *ServerInterfaceWrapper) GetUsersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUsersId(c, id)
}

// PutUsersId operation middleware
func (siw *ServerInterfaceWrapper) PutUsersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutUsersId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/applications/my", wrapper.GetApplicationsMy)
	router.GET(options.BaseURL+"/applications/:id", wrapper.GetApplicationsId)
	router.PATCH(options.BaseURL+"/applications/:id/accept", wrapper.PatchApplicationsIdAccept)
	router.PATCH(options.BaseURL+"/applications/:id/reject", wrapper.PatchApplicationsIdReject)
	router.PATCH(options.BaseURL+"/applications/:id/withdraw", wrapper.PatchApplicationsIdWithdraw)
	router.POST(options.BaseURL+"/auth/login", wrapper.PostAuthLogin)
	router.POST(options.BaseURL+"/auth/logout", wrapper.PostAuthLogout)
	router.POST(options.BaseURL+"/auth/refresh", wrapper.PostAuthRefresh)
	router.POST(options.BaseURL+"/auth/register", wrapper.PostAuthRegister)
	router.GET(options.BaseURL+"/health", wrapper.GetHealth)
	router.POST(options.BaseURL+"/invoices", wrapper.PostInvoices)
	router.DELETE(options.BaseURL+"/invoices/:id", wrapper.DeleteInvoicesId)
	router.GET(options.BaseURL+"/invoices/:id", wrapper.GetInvoicesId)
	router.PATCH(options.BaseURL+"/invoices/:id/state", wrapper.PatchInvoicesIdState)
	router.POST(options.BaseURL+"/jobs", wrapper.PostJobs)
	router.GET(options.BaseURL+"/jobs/available", wrapper.GetJobsAvailable)
	router.GET(options.BaseURL+"/jobs/my/contractor", wrapper.GetJobsMyContractor)
	router.GET(options.BaseURL+"/jobs/my/employer", wrapper.GetJobsMyEmployer)
	router.DELETE(options.BaseURL+"/jobs/:id", wrapper.DeleteJobsId)
	router.GET(options.BaseURL+"/jobs/:id", wrapper.GetJobsId)
	router.GET(options.BaseURL+"/jobs/:id/applications", wrapper.GetJobsIdApplications)
	router.POST(options.BaseURL+"/jobs/:id/apply", wrapper.PostJobsIdApply)
	router.PATCH(options.BaseURL+"/jobs/:id/details", wrapper.PatchJobsIdDetails)
	router.GET(options.BaseURL+"/jobs/:id/invoices", wrapper.GetJobsIdInvoices)
	router.PATCH(options.BaseURL+"/jobs/:id/state", wrapper.PatchJobsIdState)
	router.GET(options.BaseURL+"/users", wrapper.GetUsers)
	router.DELETE(options.BaseURL+"/users/:id", wrapper.DeleteUsersId)
	router.GET(options.BaseURL+"/users/:id", wrapper.GetUsersId)
	router.PUT(options.BaseURL+"/users/:id", wrapper.PutUsersId)
}

type GetApplicationsMyRequestObject struct {
	Params GetApplicationsMyParams
}

type GetApplicationsMyResponseObject interface {
	VisitGetApplicationsMyResponse(w http.ResponseWriter) error
}

type GetApplicationsMy200JSONResponse []DtoJobApplicationResponse

func (response GetApplicationsMy200JSONResponse) VisitGetApplicationsMyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApplicationsMy400JSONResponse map[string]string

func (response GetApplicationsMy400JSONResponse) VisitGetApplicationsMyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetApplicationsMy401JSONResponse map[string]string

func (response GetApplicationsMy401JSONResponse) VisitGetApplicationsMyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetApplicationsMy500JSONResponse map[string]string

func (response GetApplicationsMy500JSONResponse) VisitGetApplicationsMyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetApplicationsIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetApplicationsIdResponseObject interface {
	VisitGetApplicationsIdResponse(w http.ResponseWriter) error
}

type GetApplicationsId200JSONResponse DtoJobApplicationResponse

func (response GetApplicationsId200JSONResponse) VisitGetApplicationsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApplicationsId400JSONResponse map[string]string

func (response GetApplicationsId400JSONResponse) VisitGetApplicationsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetApplicationsId401JSONResponse map[string]string

func (response GetApplicationsId401JSONResponse) VisitGetApplicationsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetApplicationsId403JSONResponse map[string]string

func (response GetApplicationsId403JSONResponse) VisitGetApplicationsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetApplicationsId404JSONResponse map[string]string

func (response GetApplicationsId404JSONResponse) VisitGetApplicationsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetApplicationsId500JSONResponse map[string]string

func (response GetApplicationsId500JSONResponse) VisitGetApplicationsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchApplicationsIdAcceptRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type PatchApplicationsIdAcceptResponseObject interface {
	VisitPatchApplicationsIdAcceptResponse(w http.ResponseWriter) error
}

type PatchApplicationsIdAccept200JSONResponse DtoJobResponse

func (response PatchApplicationsIdAccept200JSONResponse) VisitPatchApplicationsIdAcceptResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchApplicationsIdAccept400JSONResponse map[string]string

func (response PatchApplicationsIdAccept400JSONResponse) VisitPatchApplicationsIdAcceptResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchApplicationsIdAccept401JSONResponse map[string]string

func (response PatchApplicationsIdAccept401JSONResponse) VisitPatchApplicationsIdAcceptResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchApplicationsIdAccept403JSONResponse map[string]string

func (response PatchApplicationsIdAccept403JSONResponse) VisitPatchApplicationsIdAcceptResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchApplicationsIdAccept404JSONResponse map[string]string

func (response PatchApplicationsIdAccept404JSONResponse) VisitPatchApplicationsIdAcceptResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchApplicationsIdAccept409JSONResponse map[string]string

func (response PatchApplicationsIdAccept409JSONResponse) VisitPatchApplicationsIdAcceptResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PatchApplicationsIdAccept500JSONResponse map[string]string

func (response PatchApplicationsIdAccept500JSONResponse) VisitPatchApplicationsIdAcceptResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchApplicationsIdRejectRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type PatchApplicationsIdRejectResponseObject interface {
	VisitPatchApplicationsIdRejectResponse(w http.ResponseWriter) error
}

type PatchApplicationsIdReject200JSONResponse DtoJobApplicationResponse

func (response PatchApplicationsIdReject200JSONResponse) VisitPatchApplicationsIdRejectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchApplicationsIdReject400JSONResponse map[string]string

func (response PatchApplicationsIdReject400JSONResponse) VisitPatchApplicationsIdRejectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchApplicationsIdReject401JSONResponse map[string]string

func (response PatchApplicationsIdReject401JSONResponse) VisitPatchApplicationsIdRejectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchApplicationsIdReject403JSONResponse map[string]string

func (response PatchApplicationsIdReject403JSONResponse) VisitPatchApplicationsIdRejectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchApplicationsIdReject404JSONResponse map[string]string

func (response PatchApplicationsIdReject404JSONResponse) VisitPatchApplicationsIdRejectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchApplicationsIdReject409JSONResponse map[string]string

func (response PatchApplicationsIdReject409JSONResponse) VisitPatchApplicationsIdRejectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PatchApplicationsIdReject500JSONResponse map[string]string

func (response PatchApplicationsIdReject500JSONResponse) VisitPatchApplicationsIdRejectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchApplicationsIdWithdrawRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type PatchApplicationsIdWithdrawResponseObject interface {
	VisitPatchApplicationsIdWithdrawResponse(w http.ResponseWriter) error
}

type PatchApplicationsIdWithdraw200JSONResponse DtoJobApplicationResponse

func (response PatchApplicationsIdWithdraw200JSONResponse) VisitPatchApplicationsIdWithdrawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchApplicationsIdWithdraw400JSONResponse map[string]string

func (response PatchApplicationsIdWithdraw400JSONResponse) VisitPatchApplicationsIdWithdrawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchApplicationsIdWithdraw401JSONResponse map[string]string

func (response PatchApplicationsIdWithdraw401JSONResponse) VisitPatchApplicationsIdWithdrawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchApplicationsIdWithdraw403JSONResponse map[string]string

func (response PatchApplicationsIdWithdraw403JSONResponse) VisitPatchApplicationsIdWithdrawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchApplicationsIdWithdraw404JSONResponse map[string]string

func (response PatchApplicationsIdWithdraw404JSONResponse) VisitPatchApplicationsIdWithdrawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchApplicationsIdWithdraw409JSONResponse map[string]string

func (response PatchApplicationsIdWithdraw409JSONResponse) VisitPatchApplicationsIdWithdrawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PatchApplicationsIdWithdraw500JSONResponse map[string]string

func (response PatchApplicationsIdWithdraw500JSONResponse) VisitPatchApplicationsIdWithdrawResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthLoginRequestObject struct {
	Body *PostAuthLoginJSONRequestBody
}

type PostAuthLoginResponseObject interface {
	VisitPostAuthLoginResponse(w http.ResponseWriter) error
}

type PostAuthLogin200JSONResponse DtoLoginResponse

func (response PostAuthLogin200JSONResponse) VisitPostAuthLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthLogin400JSONResponse map[string]string

func (response PostAuthLogin400JSONResponse) VisitPostAuthLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthLogin401JSONResponse map[string]string

func (response PostAuthLogin401JSONResponse) VisitPostAuthLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthLogin500JSONResponse map[string]string

func (response PostAuthLogin500JSONResponse) VisitPostAuthLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthLogoutRequestObject struct {
	Body *PostAuthLogoutJSONRequestBody
}

type PostAuthLogoutResponseObject interface {
	VisitPostAuthLogoutResponse(w http.ResponseWriter) error
}

type PostAuthLogout204Response struct {
}

func (response PostAuthLogout204Response) VisitPostAuthLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PostAuthLogout400JSONResponse map[string]string

func (response PostAuthLogout400JSONResponse) VisitPostAuthLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthLogout500JSONResponse map[string]string

func (response PostAuthLogout500JSONResponse) VisitPostAuthLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRefreshRequestObject struct {
	Body *PostAuthRefreshJSONRequestBody
}

type PostAuthRefreshResponseObject interface {
	VisitPostAuthRefreshResponse(w http.ResponseWriter) error
}

type PostAuthRefresh200JSONResponse DtoRefreshResponse

func (response PostAuthRefresh200JSONResponse) VisitPostAuthRefreshResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRefresh400JSONResponse map[string]string

func (response PostAuthRefresh400JSONResponse) VisitPostAuthRefreshResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRefresh401JSONResponse map[string]string

func (response PostAuthRefresh401JSONResponse) VisitPostAuthRefreshResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRefresh500JSONResponse map[string]string

func (response PostAuthRefresh500JSONResponse) VisitPostAuthRefreshResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRegisterRequestObject struct {
	Body *PostAuthRegisterJSONRequestBody
}

type PostAuthRegisterResponseObject interface {
	VisitPostAuthRegisterResponse(w http.ResponseWriter) error
}

type PostAuthRegister201JSONResponse DtoUserResponse

func (response PostAuthRegister201JSONResponse) VisitPostAuthRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRegister400JSONResponse map[string]string

func (response PostAuthRegister400JSONResponse) VisitPostAuthRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRegister409JSONResponse map[string]string

func (response PostAuthRegister409JSONResponse) VisitPostAuthRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRegister500JSONResponse map[string]string

func (response PostAuthRegister500JSONResponse) VisitPostAuthRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthRequestObject struct {
}

type GetHealthResponseObject interface {
	VisitGetHealthResponse(w http.ResponseWriter) error
}

type GetHealth200JSONResponse map[string]string

func (response GetHealth200JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostInvoicesRequestObject struct {
	Body *PostInvoicesJSONRequestBody
}

type PostInvoicesResponseObject interface {
	VisitPostInvoicesResponse(w http.ResponseWriter) error
}

type PostInvoices201JSONResponse DtoInvoiceResponse

func (response PostInvoices201JSONResponse) VisitPostInvoicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostInvoices400JSONResponse map[string]string

func (response PostInvoices400JSONResponse) VisitPostInvoicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostInvoices401JSONResponse map[string]string

func (response PostInvoices401JSONResponse) VisitPostInvoicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostInvoices403JSONResponse map[string]string

func (response PostInvoices403JSONResponse) VisitPostInvoicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostInvoices409JSONResponse map[string]string

func (response PostInvoices409JSONResponse) VisitPostInvoicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostInvoices500JSONResponse map[string]string

func (response PostInvoices500JSONResponse) VisitPostInvoicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteInvoicesIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteInvoicesIdResponseObject interface {
	VisitDeleteInvoicesIdResponse(w http.ResponseWriter) error
}

type DeleteInvoicesId204Response struct {
}

func (response DeleteInvoicesId204Response) VisitDeleteInvoicesIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteInvoicesId400JSONResponse map[string]string

func (response DeleteInvoicesId400JSONResponse) VisitDeleteInvoicesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteInvoicesId401JSONResponse map[string]string

func (response DeleteInvoicesId401JSONResponse) VisitDeleteInvoicesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteInvoicesId403JSONResponse map[string]string

func (response DeleteInvoicesId403JSONResponse) VisitDeleteInvoicesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteInvoicesId404JSONResponse map[string]string

func (response DeleteInvoicesId404JSONResponse) VisitDeleteInvoicesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteInvoicesId500JSONResponse map[string]string

func (response DeleteInvoicesId500JSONResponse) VisitDeleteInvoicesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetInvoicesIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetInvoicesIdResponseObject interface {
	VisitGetInvoicesIdResponse(w http.ResponseWriter) error
}

type GetInvoicesId200JSONResponse DtoInvoiceResponse

func (response GetInvoicesId200JSONResponse) VisitGetInvoicesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetInvoicesId400JSONResponse map[string]string

func (response GetInvoicesId400JSONResponse) VisitGetInvoicesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetInvoicesId401JSONResponse map[string]string

func (response GetInvoicesId401JSONResponse) VisitGetInvoicesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetInvoicesId403JSONResponse map[string]string

func (response GetInvoicesId403JSONResponse) VisitGetInvoicesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetInvoicesId404JSONResponse map[string]string

func (response GetInvoicesId404JSONResponse) VisitGetInvoicesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetInvoicesId500JSONResponse map[string]string

func (response GetInvoicesId500JSONResponse) VisitGetInvoicesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchInvoicesIdStateRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *PatchInvoicesIdStateJSONRequestBody
}

type PatchInvoicesIdStateResponseObject interface {
	VisitPatchInvoicesIdStateResponse(w http.ResponseWriter) error
}

type PatchInvoicesIdState200JSONResponse DtoInvoiceResponse

func (response PatchInvoicesIdState200JSONResponse) VisitPatchInvoicesIdStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchInvoicesIdState400JSONResponse map[string]string

func (response PatchInvoicesIdState400JSONResponse) VisitPatchInvoicesIdStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchInvoicesIdState401JSONResponse map[string]string

func (response PatchInvoicesIdState401JSONResponse) VisitPatchInvoicesIdStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchInvoicesIdState403JSONResponse map[string]string

func (response PatchInvoicesIdState403JSONResponse) VisitPatchInvoicesIdStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchInvoicesIdState404JSONResponse map[string]string

func (response PatchInvoicesIdState404JSONResponse) VisitPatchInvoicesIdStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchInvoicesIdState500JSONResponse map[string]string

func (response PatchInvoicesIdState500JSONResponse) VisitPatchInvoicesIdStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostJobsRequestObject struct {
	Body *PostJobsJSONRequestBody
}

type PostJobsResponseObject interface {
	VisitPostJobsResponse(w http.ResponseWriter) error
}

type PostJobs201JSONResponse DtoJobResponse

func (response PostJobs201JSONResponse) VisitPostJobsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostJobs400JSONResponse map[string]string

func (response PostJobs400JSONResponse) VisitPostJobsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostJobs401JSONResponse map[string]string

func (response PostJobs401JSONResponse) VisitPostJobsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostJobs500JSONResponse map[string]string

func (response PostJobs500JSONResponse) VisitPostJobsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsAvailableRequestObject struct {
	Params GetJobsAvailableParams
}

type GetJobsAvailableResponseObject interface {
	VisitGetJobsAvailableResponse(w http.ResponseWriter) error
}

type GetJobsAvailable200JSONResponse []DtoJobResponse

func (response GetJobsAvailable200JSONResponse) VisitGetJobsAvailableResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsAvailable400JSONResponse map[string]string

func (response GetJobsAvailable400JSONResponse) VisitGetJobsAvailableResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsAvailable401JSONResponse map[string]string

func (response GetJobsAvailable401JSONResponse) VisitGetJobsAvailableResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsAvailable500JSONResponse map[string]string

func (response GetJobsAvailable500JSONResponse) VisitGetJobsAvailableResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsMyContractorRequestObject struct {
	Params GetJobsMyContractorParams
}

type GetJobsMyContractorResponseObject interface {
	VisitGetJobsMyContractorResponse(w http.ResponseWriter) error
}

type GetJobsMyContractor200JSONResponse []DtoJobResponse

func (response GetJobsMyContractor200JSONResponse) VisitGetJobsMyContractorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsMyContractor400JSONResponse map[string]string

func (response GetJobsMyContractor400JSONResponse) VisitGetJobsMyContractorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsMyContractor401JSONResponse map[string]string

func (response GetJobsMyContractor401JSONResponse) VisitGetJobsMyContractorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsMyContractor500JSONResponse map[string]string

func (response GetJobsMyContractor500JSONResponse) VisitGetJobsMyContractorResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsMyEmployerRequestObject struct {
	Params GetJobsMyEmployerParams
}

type GetJobsMyEmployerResponseObject interface {
	VisitGetJobsMyEmployerResponse(w http.ResponseWriter) error
}

type GetJobsMyEmployer200JSONResponse []DtoJobResponse

func (response GetJobsMyEmployer200JSONResponse) VisitGetJobsMyEmployerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsMyEmployer400JSONResponse map[string]string

func (response GetJobsMyEmployer400JSONResponse) VisitGetJobsMyEmployerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsMyEmployer401JSONResponse map[string]string

func (response GetJobsMyEmployer401JSONResponse) VisitGetJobsMyEmployerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsMyEmployer500JSONResponse map[string]string

func (response GetJobsMyEmployer500JSONResponse) VisitGetJobsMyEmployerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteJobsIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteJobsIdResponseObject interface {
	VisitDeleteJobsIdResponse(w http.ResponseWriter) error
}

type DeleteJobsId204Response struct {
}

func (response DeleteJobsId204Response) VisitDeleteJobsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteJobsId400JSONResponse map[string]string

func (response DeleteJobsId400JSONResponse) VisitDeleteJobsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteJobsId401JSONResponse map[string]string

func (response DeleteJobsId401JSONResponse) VisitDeleteJobsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteJobsId403JSONResponse map[string]string

func (response DeleteJobsId403JSONResponse) VisitDeleteJobsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteJobsId404JSONResponse map[string]string

func (response DeleteJobsId404JSONResponse) VisitDeleteJobsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteJobsId500JSONResponse map[string]string

func (response DeleteJobsId500JSONResponse) VisitDeleteJobsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetJobsIdResponseObject interface {
	VisitGetJobsIdResponse(w http.ResponseWriter) error
}

type GetJobsId200JSONResponse DtoJobResponse

func (response GetJobsId200JSONResponse) VisitGetJobsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsId400JSONResponse map[string]string

func (response GetJobsId400JSONResponse) VisitGetJobsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsId401JSONResponse map[string]string

func (response GetJobsId401JSONResponse) VisitGetJobsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsId404JSONResponse map[string]string

func (response GetJobsId404JSONResponse) VisitGetJobsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsId500JSONResponse map[string]string

func (response GetJobsId500JSONResponse) VisitGetJobsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsIdApplicationsRequestObject struct {
	Id     openapi_types.UUID `json:"id"`
	Params GetJobsIdApplicationsParams
}

type GetJobsIdApplicationsResponseObject interface {
	VisitGetJobsIdApplicationsResponse(w http.ResponseWriter) error
}

type GetJobsIdApplications200JSONResponse []DtoJobApplicationResponse

func (response GetJobsIdApplications200JSONResponse) VisitGetJobsIdApplicationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsIdApplications400JSONResponse map[string]string

func (response GetJobsIdApplications400JSONResponse) VisitGetJobsIdApplicationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsIdApplications401JSONResponse map[string]string

func (response GetJobsIdApplications401JSONResponse) VisitGetJobsIdApplicationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsIdApplications403JSONResponse map[string]string

func (response GetJobsIdApplications403JSONResponse) VisitGetJobsIdApplicationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsIdApplications404JSONResponse map[string]string

func (response GetJobsIdApplications404JSONResponse) VisitGetJobsIdApplicationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsIdApplications500JSONResponse map[string]string

func (response GetJobsIdApplications500JSONResponse) VisitGetJobsIdApplicationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostJobsIdApplyRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type PostJobsIdApplyResponseObject interface {
	VisitPostJobsIdApplyResponse(w http.ResponseWriter) error
}

type PostJobsIdApply201JSONResponse DtoJobApplicationResponse

func (response PostJobsIdApply201JSONResponse) VisitPostJobsIdApplyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostJobsIdApply400JSONResponse map[string]string

func (response PostJobsIdApply400JSONResponse) VisitPostJobsIdApplyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostJobsIdApply401JSONResponse map[string]string

func (response PostJobsIdApply401JSONResponse) VisitPostJobsIdApplyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostJobsIdApply403JSONResponse map[string]string

func (response PostJobsIdApply403JSONResponse) VisitPostJobsIdApplyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostJobsIdApply404JSONResponse map[string]string

func (response PostJobsIdApply404JSONResponse) VisitPostJobsIdApplyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostJobsIdApply500JSONResponse map[string]string

func (response PostJobsIdApply500JSONResponse) VisitPostJobsIdApplyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchJobsIdDetailsRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *PatchJobsIdDetailsJSONRequestBody
}

type PatchJobsIdDetailsResponseObject interface {
	VisitPatchJobsIdDetailsResponse(w http.ResponseWriter) error
}

type PatchJobsIdDetails200JSONResponse DtoJobResponse

func (response PatchJobsIdDetails200JSONResponse) VisitPatchJobsIdDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchJobsIdDetails400JSONResponse map[string]string

func (response PatchJobsIdDetails400JSONResponse) VisitPatchJobsIdDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchJobsIdDetails401JSONResponse map[string]string

func (response PatchJobsIdDetails401JSONResponse) VisitPatchJobsIdDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchJobsIdDetails403JSONResponse map[string]string

func (response PatchJobsIdDetails403JSONResponse) VisitPatchJobsIdDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchJobsIdDetails404JSONResponse map[string]string

func (response PatchJobsIdDetails404JSONResponse) VisitPatchJobsIdDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchJobsIdDetails500JSONResponse map[string]string

func (response PatchJobsIdDetails500JSONResponse) VisitPatchJobsIdDetailsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsIdInvoicesRequestObject struct {
	Id     openapi_types.UUID `json:"id"`
	Params GetJobsIdInvoicesParams
}

type GetJobsIdInvoicesResponseObject interface {
	VisitGetJobsIdInvoicesResponse(w http.ResponseWriter) error
}

type GetJobsIdInvoices200JSONResponse []DtoInvoiceResponse

func (response GetJobsIdInvoices200JSONResponse) VisitGetJobsIdInvoicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsIdInvoices400JSONResponse map[string]string

func (response GetJobsIdInvoices400JSONResponse) VisitGetJobsIdInvoicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsIdInvoices401JSONResponse map[string]string

func (response GetJobsIdInvoices401JSONResponse) VisitGetJobsIdInvoicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsIdInvoices403JSONResponse map[string]string

func (response GetJobsIdInvoices403JSONResponse) VisitGetJobsIdInvoicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsIdInvoices404JSONResponse map[string]string

func (response GetJobsIdInvoices404JSONResponse) VisitGetJobsIdInvoicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsIdInvoices500JSONResponse map[string]string

func (response GetJobsIdInvoices500JSONResponse) VisitGetJobsIdInvoicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchJobsIdStateRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *PatchJobsIdStateJSONRequestBody
}

type PatchJobsIdStateResponseObject interface {
	VisitPatchJobsIdStateResponse(w http.ResponseWriter) error
}

type PatchJobsIdState200JSONResponse DtoJobResponse

func (response PatchJobsIdState200JSONResponse) VisitPatchJobsIdStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchJobsIdState400JSONResponse map[string]string

func (response PatchJobsIdState400JSONResponse) VisitPatchJobsIdStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchJobsIdState401JSONResponse map[string]string

func (response PatchJobsIdState401JSONResponse) VisitPatchJobsIdStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchJobsIdState403JSONResponse map[string]string

func (response PatchJobsIdState403JSONResponse) VisitPatchJobsIdStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchJobsIdState404JSONResponse map[string]string

func (response PatchJobsIdState404JSONResponse) VisitPatchJobsIdStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchJobsIdState500JSONResponse map[string]string

func (response PatchJobsIdState500JSONResponse) VisitPatchJobsIdStateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersRequestObject struct {
}

type GetUsersResponseObject interface {
	VisitGetUsersResponse(w http.ResponseWriter) error
}

type GetUsers200JSONResponse []DtoUserResponse

func (response GetUsers200JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers500JSONResponse map[string]string

func (response GetUsers500JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsersIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteUsersIdResponseObject interface {
	VisitDeleteUsersIdResponse(w http.ResponseWriter) error
}

type DeleteUsersId204Response struct {
}

func (response DeleteUsersId204Response) VisitDeleteUsersIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUsersId400JSONResponse map[string]string

func (response DeleteUsersId400JSONResponse) VisitDeleteUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsersId401JSONResponse map[string]string

func (response DeleteUsersId401JSONResponse) VisitDeleteUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsersId403JSONResponse map[string]string

func (response DeleteUsersId403JSONResponse) VisitDeleteUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsersId404JSONResponse map[string]string

func (response DeleteUsersId404JSONResponse) VisitDeleteUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsersId500JSONResponse map[string]string

func (response DeleteUsersId500JSONResponse) VisitDeleteUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetUsersIdResponseObject interface {
	VisitGetUsersIdResponse(w http.ResponseWriter) error
}

type GetUsersId200JSONResponse DtoUserResponse

func (response GetUsersId200JSONResponse) VisitGetUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersId400JSONResponse map[string]string

func (response GetUsersId400JSONResponse) VisitGetUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersId404JSONResponse map[string]string

func (response GetUsersId404JSONResponse) VisitGetUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersId500JSONResponse map[string]string

func (response GetUsersId500JSONResponse) VisitGetUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersIdRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *PutUsersIdJSONRequestBody
}

type PutUsersIdResponseObject interface {
	VisitPutUsersIdResponse(w http.ResponseWriter) error
}

type PutUsersId200JSONResponse DtoUserResponse

func (response PutUsersId200JSONResponse) VisitPutUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersId400JSONResponse map[string]string

func (response PutUsersId400JSONResponse) VisitPutUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersId401JSONResponse map[string]string

func (response PutUsersId401JSONResponse) VisitPutUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersId403JSONResponse map[string]string

func (response PutUsersId403JSONResponse) VisitPutUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersId404JSONResponse map[string]string

func (response PutUsersId404JSONResponse) VisitPutUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersId409JSONResponse map[string]string

func (response PutUsersId409JSONResponse) VisitPutUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersId500JSONResponse map[string]string

func (response PutUsersId500JSONResponse) VisitPutUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List applications submitted by the authenticated user
	// (GET /applications/my)
	GetApplicationsMy(ctx context.Context, request GetApplicationsMyRequestObject) (GetApplicationsMyResponseObject, error)
	// Get a job application by ID
	// (GET /applications/{id})
	GetApplicationsId(ctx context.Context, request GetApplicationsIdRequestObject) (GetApplicationsIdResponseObject, error)
	// Accept a job application
	// (PATCH /applications/{id}/accept)
	PatchApplicationsIdAccept(ctx context.Context, request PatchApplicationsIdAcceptRequestObject) (PatchApplicationsIdAcceptResponseObject, error)
	// Reject a job application
	// (PATCH /applications/{id}/reject)
	PatchApplicationsIdReject(ctx context.Context, request PatchApplicationsIdRejectRequestObject) (PatchApplicationsIdRejectResponseObject, error)
	// Withdraw a job application
	// (PATCH /applications/{id}/withdraw)
	PatchApplicationsIdWithdraw(ctx context.Context, request PatchApplicationsIdWithdrawRequestObject) (PatchApplicationsIdWithdrawResponseObject, error)
	// Log in a user
	// (POST /auth/login)
	PostAuthLogin(ctx context.Context, request PostAuthLoginRequestObject) (PostAuthLoginResponseObject, error)
	// Log out user
	// (POST /auth/logout)
	PostAuthLogout(ctx context.Context, request PostAuthLogoutRequestObject) (PostAuthLogoutResponseObject, error)
	// Refresh access token
	// (POST /auth/refresh)
	PostAuthRefresh(ctx context.Context, request PostAuthRefreshRequestObject) (PostAuthRefreshResponseObject, error)
	// Register a new user
	// (POST /auth/register)
	PostAuthRegister(ctx context.Context, request PostAuthRegisterRequestObject) (PostAuthRegisterResponseObject, error)
	// Health check
	// (GET /health)
	GetHealth(ctx context.Context, request GetHealthRequestObject) (GetHealthResponseObject, error)
	// Create an invoice for a job
	// (POST /invoices)
	PostInvoices(ctx context.Context, request PostInvoicesRequestObject) (PostInvoicesResponseObject, error)
	// Delete an invoice
	// (DELETE /invoices/{id})
	DeleteInvoicesId(ctx context.Context, request DeleteInvoicesIdRequestObject) (DeleteInvoicesIdResponseObject, error)
	// Get an invoice by ID
	// (GET /invoices/{id})
	GetInvoicesId(ctx context.Context, request GetInvoicesIdRequestObject) (GetInvoicesIdResponseObject, error)
	// Update invoice state
	// (PATCH /invoices/{id}/state)
	PatchInvoicesIdState(ctx context.Context, request PatchInvoicesIdStateRequestObject) (PatchInvoicesIdStateResponseObject, error)
	// Create a new job posting
	// (POST /jobs)
	PostJobs(ctx context.Context, request PostJobsRequestObject) (PostJobsResponseObject, error)
	// List available jobs
	// (GET /jobs/available)
	GetJobsAvailable(ctx context.Context, request GetJobsAvailableRequestObject) (GetJobsAvailableResponseObject, error)
	// List jobs taken by the authenticated contractor
	// (GET /jobs/my/contractor)
	GetJobsMyContractor(ctx context.Context, request GetJobsMyContractorRequestObject) (GetJobsMyContractorResponseObject, error)
	// List jobs posted by the authenticated employer
	// (GET /jobs/my/employer)
	GetJobsMyEmployer(ctx context.Context, request GetJobsMyEmployerRequestObject) (GetJobsMyEmployerResponseObject, error)
	// Delete a job
	// (DELETE /jobs/{id})
	DeleteJobsId(ctx context.Context, request DeleteJobsIdRequestObject) (DeleteJobsIdResponseObject, error)
	// Get a job by ID
	// (GET /jobs/{id})
	GetJobsId(ctx context.Context, request GetJobsIdRequestObject) (GetJobsIdResponseObject, error)
	// List applications for a specific job
	// (GET /jobs/{id}/applications)
	GetJobsIdApplications(ctx context.Context, request GetJobsIdApplicationsRequestObject) (GetJobsIdApplicationsResponseObject, error)
	// Apply for a job
	// (POST /jobs/{id}/apply)
	PostJobsIdApply(ctx context.Context, request PostJobsIdApplyRequestObject) (PostJobsIdApplyResponseObject, error)
	// Update job rate or duration
	// (PATCH /jobs/{id}/details)
	PatchJobsIdDetails(ctx context.Context, request PatchJobsIdDetailsRequestObject) (PatchJobsIdDetailsResponseObject, error)
	// List invoices for a specific job
	// (GET /jobs/{id}/invoices)
	GetJobsIdInvoices(ctx context.Context, request GetJobsIdInvoicesRequestObject) (GetJobsIdInvoicesResponseObject, error)
	// Update job state
	// (PATCH /jobs/{id}/state)
	PatchJobsIdState(ctx context.Context, request PatchJobsIdStateRequestObject) (PatchJobsIdStateResponseObject, error)
	// List all users
	// (GET /users)
	GetUsers(ctx context.Context, request GetUsersRequestObject) (GetUsersResponseObject, error)
	// Delete a user by ID
	// (DELETE /users/{id})
	DeleteUsersId(ctx context.Context, request DeleteUsersIdRequestObject) (DeleteUsersIdResponseObject, error)
	// Get a user by ID
	// (GET /users/{id})
	GetUsersId(ctx context.Context, request GetUsersIdRequestObject) (GetUsersIdResponseObject, error)
	// Update an existing user
	// (PUT /users/{id})
	PutUsersId(ctx context.Context, request PutUsersIdRequestObject) (PutUsersIdResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetApplicationsMy operation middleware
func (sh *strictHandler) GetApplicationsMy(ctx *gin.Context, params GetApplicationsMyParams) {
	var request GetApplicationsMyRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApplicationsMy(ctx, request.(GetApplicationsMyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApplicationsMy")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApplicationsMyResponseObject); ok {
		if err := validResponse.VisitGetApplicationsMyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApplicationsId operation middleware
func (sh *strictHandler) GetApplicationsId(ctx *gin.Context, id openapi_types.UUID) {
	var request GetApplicationsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApplicationsId(ctx, request.(GetApplicationsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApplicationsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApplicationsIdResponseObject); ok {
		if err := validResponse.VisitGetApplicationsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchApplicationsIdAccept operation middleware
func (sh *strictHandler) PatchApplicationsIdAccept(ctx *gin.Context, id openapi_types.UUID) {
	var request PatchApplicationsIdAcceptRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchApplicationsIdAccept(ctx, request.(PatchApplicationsIdAcceptRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchApplicationsIdAccept")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PatchApplicationsIdAcceptResponseObject); ok {
		if err := validResponse.VisitPatchApplicationsIdAcceptResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchApplicationsIdReject operation middleware
func (sh *strictHandler) PatchApplicationsIdReject(ctx *gin.Context, id openapi_types.UUID) {
	var request PatchApplicationsIdRejectRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchApplicationsIdReject(ctx, request.(PatchApplicationsIdRejectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchApplicationsIdReject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PatchApplicationsIdRejectResponseObject); ok {
		if err := validResponse.VisitPatchApplicationsIdRejectResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchApplicationsIdWithdraw operation middleware
func (sh *strictHandler) PatchApplicationsIdWithdraw(ctx *gin.Context, id openapi_types.UUID) {
	var request PatchApplicationsIdWithdrawRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchApplicationsIdWithdraw(ctx, request.(PatchApplicationsIdWithdrawRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchApplicationsIdWithdraw")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PatchApplicationsIdWithdrawResponseObject); ok {
		if err := validResponse.VisitPatchApplicationsIdWithdrawResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAuthLogin operation middleware
func (sh *strictHandler) PostAuthLogin(ctx *gin.Context) {
	var request PostAuthLoginRequestObject

	var body PostAuthLoginJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthLogin(ctx, request.(PostAuthLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostAuthLoginResponseObject); ok {
		if err := validResponse.VisitPostAuthLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAuthLogout operation middleware
func (sh *strictHandler) PostAuthLogout(ctx *gin.Context) {
	var request PostAuthLogoutRequestObject

	var body PostAuthLogoutJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthLogout(ctx, request.(PostAuthLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthLogout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostAuthLogoutResponseObject); ok {
		if err := validResponse.VisitPostAuthLogoutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAuthRefresh operation middleware
func (sh *strictHandler) PostAuthRefresh(ctx *gin.Context) {
	var request PostAuthRefreshRequestObject

	var body PostAuthRefreshJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthRefresh(ctx, request.(PostAuthRefreshRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthRefresh")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostAuthRefreshResponseObject); ok {
		if err := validResponse.VisitPostAuthRefreshResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAuthRegister operation middleware
func (sh *strictHandler) PostAuthRegister(ctx *gin.Context) {
	var request PostAuthRegisterRequestObject

	var body PostAuthRegisterJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthRegister(ctx, request.(PostAuthRegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthRegister")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostAuthRegisterResponseObject); ok {
		if err := validResponse.VisitPostAuthRegisterResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetHealth operation middleware
func (sh *strictHandler) GetHealth(ctx *gin.Context) {
	var request GetHealthRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealth(ctx, request.(GetHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetHealthResponseObject); ok {
		if err := validResponse.VisitGetHealthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostInvoices operation middleware
func (sh *strictHandler) PostInvoices(ctx *gin.Context) {
	var request PostInvoicesRequestObject

	var body PostInvoicesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostInvoices(ctx, request.(PostInvoicesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostInvoices")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostInvoicesResponseObject); ok {
		if err := validResponse.VisitPostInvoicesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteInvoicesId operation middleware
func (sh *strictHandler) DeleteInvoicesId(ctx *gin.Context, id openapi_types.UUID) {
	var request DeleteInvoicesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteInvoicesId(ctx, request.(DeleteInvoicesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteInvoicesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteInvoicesIdResponseObject); ok {
		if err := validResponse.VisitDeleteInvoicesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetInvoicesId operation middleware
func (sh *strictHandler) GetInvoicesId(ctx *gin.Context, id openapi_types.UUID) {
	var request GetInvoicesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetInvoicesId(ctx, request.(GetInvoicesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetInvoicesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetInvoicesIdResponseObject); ok {
		if err := validResponse.VisitGetInvoicesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchInvoicesIdState operation middleware
func (sh *strictHandler) PatchInvoicesIdState(ctx *gin.Context, id openapi_types.UUID) {
	var request PatchInvoicesIdStateRequestObject

	request.Id = id

	var body PatchInvoicesIdStateJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchInvoicesIdState(ctx, request.(PatchInvoicesIdStateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchInvoicesIdState")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PatchInvoicesIdStateResponseObject); ok {
		if err := validResponse.VisitPatchInvoicesIdStateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostJobs operation middleware
func (sh *strictHandler) PostJobs(ctx *gin.Context) {
	var request PostJobsRequestObject

	var body PostJobsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostJobs(ctx, request.(PostJobsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostJobs")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostJobsResponseObject); ok {
		if err := validResponse.VisitPostJobsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetJobsAvailable operation middleware
func (sh *strictHandler) GetJobsAvailable(ctx *gin.Context, params GetJobsAvailableParams) {
	var request GetJobsAvailableRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetJobsAvailable(ctx, request.(GetJobsAvailableRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetJobsAvailable")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetJobsAvailableResponseObject); ok {
		if err := validResponse.VisitGetJobsAvailableResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetJobsMyContractor operation middleware
func (sh *strictHandler) GetJobsMyContractor(ctx *gin.Context, params GetJobsMyContractorParams) {
	var request GetJobsMyContractorRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetJobsMyContractor(ctx, request.(GetJobsMyContractorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetJobsMyContractor")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetJobsMyContractorResponseObject); ok {
		if err := validResponse.VisitGetJobsMyContractorResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetJobsMyEmployer operation middleware
func (sh *strictHandler) GetJobsMyEmployer(ctx *gin.Context, params GetJobsMyEmployerParams) {
	var request GetJobsMyEmployerRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetJobsMyEmployer(ctx, request.(GetJobsMyEmployerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetJobsMyEmployer")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetJobsMyEmployerResponseObject); ok {
		if err := validResponse.VisitGetJobsMyEmployerResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteJobsId operation middleware
func (sh *strictHandler) DeleteJobsId(ctx *gin.Context, id openapi_types.UUID) {
	var request DeleteJobsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteJobsId(ctx, request.(DeleteJobsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteJobsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteJobsIdResponseObject); ok {
		if err := validResponse.VisitDeleteJobsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetJobsId operation middleware
func (sh *strictHandler) GetJobsId(ctx *gin.Context, id openapi_types.UUID) {
	var request GetJobsIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetJobsId(ctx, request.(GetJobsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetJobsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetJobsIdResponseObject); ok {
		if err := validResponse.VisitGetJobsIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetJobsIdApplications operation middleware
func (sh *strictHandler) GetJobsIdApplications(ctx *gin.Context, id openapi_types.UUID, params GetJobsIdApplicationsParams) {
	var request GetJobsIdApplicationsRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetJobsIdApplications(ctx, request.(GetJobsIdApplicationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetJobsIdApplications")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetJobsIdApplicationsResponseObject); ok {
		if err := validResponse.VisitGetJobsIdApplicationsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostJobsIdApply operation middleware
func (sh *strictHandler) PostJobsIdApply(ctx *gin.Context, id openapi_types.UUID) {
	var request PostJobsIdApplyRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostJobsIdApply(ctx, request.(PostJobsIdApplyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostJobsIdApply")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostJobsIdApplyResponseObject); ok {
		if err := validResponse.VisitPostJobsIdApplyResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchJobsIdDetails operation middleware
func (sh *strictHandler) PatchJobsIdDetails(ctx *gin.Context, id openapi_types.UUID) {
	var request PatchJobsIdDetailsRequestObject

	request.Id = id

	var body PatchJobsIdDetailsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchJobsIdDetails(ctx, request.(PatchJobsIdDetailsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchJobsIdDetails")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PatchJobsIdDetailsResponseObject); ok {
		if err := validResponse.VisitPatchJobsIdDetailsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetJobsIdInvoices operation middleware
func (sh *strictHandler) GetJobsIdInvoices(ctx *gin.Context, id openapi_types.UUID, params GetJobsIdInvoicesParams) {
	var request GetJobsIdInvoicesRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetJobsIdInvoices(ctx, request.(GetJobsIdInvoicesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetJobsIdInvoices")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetJobsIdInvoicesResponseObject); ok {
		if err := validResponse.VisitGetJobsIdInvoicesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchJobsIdState operation middleware
func (sh *strictHandler) PatchJobsIdState(ctx *gin.Context, id openapi_types.UUID) {
	var request PatchJobsIdStateRequestObject

	request.Id = id

	var body PatchJobsIdStateJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchJobsIdState(ctx, request.(PatchJobsIdStateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchJobsIdState")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PatchJobsIdStateResponseObject); ok {
		if err := validResponse.VisitPatchJobsIdStateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsers operation middleware
func (sh *strictHandler) GetUsers(ctx *gin.Context) {
	var request GetUsersRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsers(ctx, request.(GetUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUsersResponseObject); ok {
		if err := validResponse.VisitGetUsersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUsersId operation middleware
func (sh *strictHandler) DeleteUsersId(ctx *gin.Context, id openapi_types.UUID) {
	var request DeleteUsersIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUsersId(ctx, request.(DeleteUsersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUsersId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteUsersIdResponseObject); ok {
		if err := validResponse.VisitDeleteUsersIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsersId operation middleware
func (sh *strictHandler) GetUsersId(ctx *gin.Context, id openapi_types.UUID) {
	var request GetUsersIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersId(ctx, request.(GetUsersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUsersIdResponseObject); ok {
		if err := validResponse.VisitGetUsersIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutUsersId operation middleware
func (sh *strictHandler) PutUsersId(ctx *gin.Context, id openapi_types.UUID) {
	var request PutUsersIdRequestObject

	request.Id = id

	var body PutUsersIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersId(ctx, request.(PutUsersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutUsersIdResponseObject); ok {
		if err := validResponse.VisitPutUsersIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xdfW/jNpP/KoTugOweHNu73QN6+evSZNs6t90NshsUh3qxpaWxzVQiVZJy4qfId3/A",
	"N4myJL8kTmxnhUXRJKLI4XDmN8PhcPRPELIkZRSoFMHJP4EIp5Bg/WMkWfeMA5YwoDNGQriCvzMQUj1L",
	"OUuBSwK6JY5uMiEToPqZnKcQnAQ0S0bAg/tOcMNG30jkPRKSEzoJ7u87AYe/M8IhCk7+cO2+dlw7NrqB",
	"UKouClou2KiRjijjWBJG9c8gQk5S82twbp8gQtGUZVx0UJIJiUaAUiaIJDMI8mEJlTAxpBMz82/qT3yG",
	"42rPA/tk0545llDt7QpLQClw3dWynhx3F1iYc6CGdDvmcvZeC+CN/IUEk7hmHTsBxUnNbD7pH3CMxgTi",
	"KOgECb77AHQip8HJm36/U+0nxULcMh7VcMbOsuiLUNfXj50VkmUI97pvYkIu6SJlVECVBaHmUvQNy1o+",
	"1Ip5J3Br8M0uW9HGk4hGNekEQtZLC8iMU6SfIiyQfaGGr1kaLSN7huMManT3voFNF2x0mqYxCbWwLeEW",
	"o5LjUDLeNLOH8XMdVv0nh3FwEvxHrwC4nkW33g0b4YL+7mf9zio2LWHGE3LAx7SqzECSxmwOjZ03ymMV",
	"1pohqgLoOY83k7MmBn5gE0IfADo+WGxJ/y0pTauJwxCE+ML+ghobc6ofIvO0Rgc5jDmIacPbV+Zp8+uZ",
	"MMCxTK7VFAyC2xk08twO18j1RWKX87fU+uuqIfePu01cutbibI2CRolGhuU6geP40zg4+WP5SlkNdNBT",
	"5dkCh033X5fSecFG5yAxicVaHtLaCn+/atStcuaGjbbKlaUeTQM+1rsz7xWKIITQf5mW6M8bwejJ0MDL",
	"MEAzHBM15MkwYAmRkKRy3rEP/1zt/ixMbokrXNLxTX2UZkAlNX7XtQCUZSTqXl8PzpFkKMEynKI5yzhK",
	"WARxnTI6/j3ePpT1RJkDmiWKO79jIo2zU/x0xpI0hpJE5C7R3bF683iGuSJOqC7OYYyzWJquO4H+f9GZ",
	"/rXo0Xgd69HxiU7YAkWd4JSHUzKDaHvEFcOUabW/FwMa2qsez4ppKMhNJShn+wrUgugffydyGnF8S7c3",
	"EW8gCyX5aKZ5MaQSEgFhxomcf1aIYUT+J8Ac+GmmVGtRgr/MU0BD22QYoDGLY3YLERrNEUYixSEgTCN0",
	"8fsXJJV96OrdU3ASTAFHwAMnz4Hqn3HyL7fFsrPHKfk/mAf391pex8z5fTiUngMTiCxNGZf/C3dYLVQ3",
	"ZInX9eUAfTYNgk6QcfXCVMr0pNe7vb3teu/0bD8aC8oTnRKBiFCT0q2RAD4DjsaMI4x+YUgNolApVvuF",
	"TCgI+4VQPfl0cqemHZMQLKY4wlIcTgG97fbr6ML6aZfxSc++KnofBmfvP35+f/y22+9OZRIrQiXwRHwa",
	"fwY+IyEUfYhbPJkA7xLW0016iqtExqqJJfiLI/j0chB0ghlwYab7pttXXbMUKE5JcBL80O1332gvT061",
	"VPQ8kRe9ZK7+NgFZu5HiBGageBcTIREboxs2Qv77SGSjhEhpBEdOAYUZ50BlPEc4k1OgUjWFCClPDb0q",
	"PP/XXbe0AqV4QqjRwUDTbuzxIFITBuntqsRvcz0XjhOQwIU2nGWyL/POUEwSIp3c/p0Bnxey5Z4ZC2tm",
	"r3VSmaFqbOK+s2QcNh4LaBoof1gzUt1AX5XBM1ZMr9fbft/pjo0leQvQU8a2CFFp6y0hEev4xA371cLg",
	"YM6x1eDy1D9n2u8cZ3E8R9yKSZQLiS8gqrt3G84ARxExMZLLkgmvGM5FP6hC6E84QtbNQcdoQLUvgvQC",
	"IU+INI1vdkTjNcUWQSFSL/z3zrilo3YUx+izgcj3nDPj6TrjotXNNyt/fFXyKrIkwXwenAQflAgsB4gq",
	"LCh4wxPhop0l8dG2rQxZ/5Dofg3QiozXb4FepBCSMQkXEayLbAxNGISSDI3A0GkaUYkY139Qb7rQwkqc",
	"GkSrcMprjQbnDjwUTBfYQVQvhfsreQY+jowZT5TTGChftGYD91goeSiCrI0Y3vC7BQoHDYNzZJm6V5jw",
	"rv/Djij5mfERiSKg6BipDRaiTCIsBAuJ1t9bIqdIKh+rspbvdkSyr1gfmUQ/s4wePrL+AhLhRfRSmKqx",
	"Y1P87GG9u9DbZLV1rQktqf2A0MDnQE+Bo3kPYXRktytHZTTV7jYWgkyoebnw+NTrFkc7KJxiOgGRA6sJ",
	"10uGjuwG7qijXXCudz0CMTkFjlKgkXLQSxZmbPFZ4ET3VcXmSzXFMjqb3dX3gdHLgNmfIbY7zo5eERuV",
	"2EcHrkXpVShNhAbqkvYyrtbVxwKrdWqDbDi7W+DOwRodI18uGUcXbKQnNHZY/q7/Pzui8ozRcUxCJY8X",
	"bNQ7rbAz5TBTamj1CdMQDt76nDrYXzBADzE9BtI3Nz3mvUbTsw7qmxha65k3TJbbECMSnrveGoAXZABa",
	"8N8a+C8BfqNHdiN00Lh/5TB3C7h/aw8s1kP+IvziB42VHXD9qGaEP8IauBOU1h40TNZxmrYG4SUZhFJk",
	"8/AswkGZAqdCOD54W+Dg8kHWIJPTXswmRE8wZaImdH/qHQwIhE08foQFRIhRpA+MzamszVfrIpPqaSP3",
	"Lt7/SrWJsQSOsDm6fl1jDZiQajyd2maRG4T8iUXzreJuKYuvDjAU5ZovKOQQqenjWFRMyf0Tm4dyhl8N",
	"nbqBZwX20QYQmmYa0mzGkdLGMSaxg+J9MAoeuf567ys0FOd6bIIItUrpqbuaWfC1E9wdhyyCCdBjq0nH",
	"IxbNj61zVJqqDwcsk814YBml0UCZLTX0kXKuTdZinpXSqNmq96dT7YVk0RrGXvmUKs+V5DNaQ8PfVTli",
	"5nQIangYEq2Y+SCB5otr72TaPmgW6kvOZiTS9o3CLTLZvVZCzHmHLzMmHQkbRFtX8q3Y7Y/oP7s5W0yq",
	"riFQ5zw7ji5EvIbBUPZ6Q3kFmv9DWTKPQykkz0KZcdhr9ds7g8c4grtUX1cqSfL+Y4WTZl9bt4kZEyKk",
	"ucfQ4BlHkQMMl6SiDGKEJVb+sTmEx2iKtSjn/vEShLAjPh1EVC/ONXm/Zvr2JmLuxA/O9T50QhmHqDcB",
	"quYB0es1sOTNVieycHNk2RyAH0DofJWXvAfbaXOlAMcccDRHcEeEFIcAEkYGPEXdGCP0SxoZpoBjk7dd",
	"m+Z2NoXwL0TGJvHBJBArhclS40VklJpU8kqS2q+m40da4C1m61wOFOFmvvMFnhpiUahm6zHTzsGEFuxl",
	"CNEMnwaLzCaCwp1EQrFe70eQfbucJQiRTVLBcZjFWConTN8GLcIRN2yEFCL13G1BzXfFtLlqzdwl3+IW",
	"eBf9imkUg0Ap5nrsMaGaAtOBWJKKqPNpIPKTadRwigjTKs+aqQf9gePRUwP+wqX4+kw7zXB9H6cE+Rds",
	"NDjX88q5d5pz7/mBf/HW86q5HAr2m+yePIjaUbbAaYFO7rMXQV5Bd9LtoATfFSKKOOBwqsxwG2ZfGWb3",
	"lNWkqBGhWW/ycHQzZi8r7YvlHXhoqOkt0O0wrPG6sWyDVgjTBQNww0aenclNy0rDbVsGJYuUZ6pHoK+g",
	"VQtw6L8Lj4wu+kTjea6DLmW+Bv+t7Xfk50c3+XFo1RKY4ZwtWJ2h7qTh2c4839UGATUNhoX7BLHt0eOG",
	"mOgJr2dyFs7L9DrvPIXcSd3LSR83uu8hTS3M3XceeKvGreZojogUaHBe78xWLw6Y7O9Xfo6Sf0ewbgez",
	"xwDWf24PtOFeTW6OWoA86Ds1dh2PtOPYQuIT3KihPnSVrtJ4qFhx6np5+Y6GRDZTZcOEHIyFY2N/MLu5",
	"GnOWeAlskqEjV7Dg6HUXffr44f/X8AUbkt0KnHRlBnYOlk8TemguSFOXVQS3dkXcvaHCID7vKdUGAQZD",
	"sL2RczghZnupi2MqSJ66ZeW5NQYPiyC0JuEJTYJBkvLe5EHxAPOmNhw3bCTWOtrTSXUzTGI8ig06Fesv",
	"uui9c5HN0ZjEfwE1BkSJsm4Ld7I+/nuhaHjq2K9XhLRmdS7YqAj1urmoqZgjvueP7664GKnoPai4blvF",
	"YuvRwVwtle7aIqJFnusaMKAh2oFAL1fuTUvuKD8SS4Q5+LcdaISmeAaIstK5kPUPvfI6YxJL0LXZTPrs",
	"0mI7CipOc0JfeK2dykC/EUqSLNFHe5ZvDUMlhH7jxjwUg1VqBFb6x3fr9o/vVvf/nLWCtlkgKLdyWo3a",
	"EkHfX4mgsgQs4mqBmcm8V4Db5riZ75ZtytRDqpNtDJ+/zc8Kkr83BP1ZcwuN5nb398pmJnSQi2x0kCvC",
	"+LqBCOd3FzS4iowbFpFsEX5HCF9oktmotiD/HYK88Vz1PrW29lvoo+QSA+AOhzaHf+W3r1ua0o3ySOh3",
	"W9sW+O1OpYO2agEeXFC4tQU7sgVOsVpL8H1bgjIYlyEYCtRsMgRrJ1P5EZsuOrXHZ4zGczd2nm1gk6jU",
	"Czq07oVX7PdjdJBFlGMsTZlVygCsTkq4YKOdZlSZQGybTXWo50MhppRJu4SVrNK9TKdSIvfyUqkWkkUt",
	"XnUeUZe4yJ5q8i/3DF6etVRlg5uRH4O20NUAXa3ab7cAb03R3YqnUqp/tdHGtVLbtgwSCxniLokld2lu",
	"p8x5Wta1Wf9DCwZh/CJZO0SbTvthh/bDDptt44w0Kldovzd0e14n0r+ttD8lwCpVIF/YhzKqUL+6rFbZ",
	"3MyXpBmZwooYxWwygeiY0OqRly7vrrqpszqNaUXGXszXMxSlIZ7JR32zB4UUDyWRqABQd99P09Nma9bh",
	"55nZiBt5tgndOYbmN8ElQ+yWmvvk7tpnfvr9uoXXJ6pX7uHYhkhq9+eb1yc36dn6zzrgzzhyXxY1mfwP",
	"izYWGV31af4GhO03TncdHXjKBP/ql1zrCk9ZPvYYR/n37fPFefYc/zWSTF086KCy+1t7sDw6a7HArW19",
	"cJbINj6z9dx9V5jFh9+N83adDVgwDX6pmbXjOe6lyg0/jCZkBqaUzIYXZh+TojCIvGowbXDn+dMhXLbC",
	"Y3Ifmj/q/IxxpsoFtkcHmHIF29+9kZHsNsa0jevNO48vlSygK/upa6sNJRkP5Q0bDaUpeTOUY8KFfBmB",
	"p9wmLQ06LdyALuzgqtvPdRske05RV8qmvHcqHCUchoxHdhNtlLC4SypyREXHw6zf/wFcnln+uwPJ/A95",
	"1tnSrdRat6UPfCO1+S1pIxp7t3s60JvRthJ45YZ0a0PW2lf5orl3duQl7aQWb0Cvt33ybj+rvcyG599x",
	"7NfT1R3UbmauddfP5eyW6wA/2tPV03Iex/Xl+emX9+dDyfMa47r7l3HIFcdmtp4Ymd+/FhKyMrvzChI2",
	"Kz4Lo++9l2pgm9ROwmuzp0zKlhaY1RlUGm92maF5bT5nU03RdPKi/r3tvxvKj2woz6xo7KG5ywwn9y4t",
	"yiMxr0C/H7buo1eAVbJSkqepDb1LK6fl8gXmcZoPTS0kdTmIemg+p+u0GZScCds3ROo/a/38Bjup2OfD",
	"3XsqMg7mZ6UOQ6n+G0p7Tj2UdTZ69zmhdQjYqu8W8zFX6G6ayebibCXNpaa0MaET0yfRX6zSteB19zUh",
	"g2xv9PcpowXrfMPDLLSJ7Lm9+JhAHD3/p+zW+l5HXbzARxv/3xLnvP0C3gv2vfKQ5J76XntRMN5kPUWZ",
	"GRjMVzpfSgBk0SZULcya33PRYytijHHIeBycBFMp05NeL2YhjqdMyJMf+z/2ezglvdmb4L7jNxPN7TQJ",
	"jJMJoTg+Frd4MgF+rIYy3Hjb7Qf3/w4AAP//UCXCudCiAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
