// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-api-template/ent/invoice"
	"go-api-template/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InvoiceUpdate is the builder for updating Invoice entities.
type InvoiceUpdate struct {
	config
	hooks    []Hook
	mutation *InvoiceMutation
}

// Where appends a list predicates to the InvoiceUpdate builder.
func (iu *InvoiceUpdate) Where(ps ...predicate.Invoice) *InvoiceUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetValue sets the "value" field.
func (iu *InvoiceUpdate) SetValue(f float64) *InvoiceUpdate {
	iu.mutation.ResetValue()
	iu.mutation.SetValue(f)
	return iu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableValue(f *float64) *InvoiceUpdate {
	if f != nil {
		iu.SetValue(*f)
	}
	return iu
}

// AddValue adds f to the "value" field.
func (iu *InvoiceUpdate) AddValue(f float64) *InvoiceUpdate {
	iu.mutation.AddValue(f)
	return iu
}

// SetState sets the "state" field.
func (iu *InvoiceUpdate) SetState(i invoice.State) *InvoiceUpdate {
	iu.mutation.SetState(i)
	return iu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableState(i *invoice.State) *InvoiceUpdate {
	if i != nil {
		iu.SetState(*i)
	}
	return iu
}

// SetIntervalNumber sets the "interval_number" field.
func (iu *InvoiceUpdate) SetIntervalNumber(i int) *InvoiceUpdate {
	iu.mutation.ResetIntervalNumber()
	iu.mutation.SetIntervalNumber(i)
	return iu
}

// SetNillableIntervalNumber sets the "interval_number" field if the given value is not nil.
func (iu *InvoiceUpdate) SetNillableIntervalNumber(i *int) *InvoiceUpdate {
	if i != nil {
		iu.SetIntervalNumber(*i)
	}
	return iu
}

// AddIntervalNumber adds i to the "interval_number" field.
func (iu *InvoiceUpdate) AddIntervalNumber(i int) *InvoiceUpdate {
	iu.mutation.AddIntervalNumber(i)
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *InvoiceUpdate) SetUpdatedAt(t time.Time) *InvoiceUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// Mutation returns the InvoiceMutation object of the builder.
func (iu *InvoiceUpdate) Mutation() *InvoiceMutation {
	return iu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InvoiceUpdate) Save(ctx context.Context) (int, error) {
	iu.defaults()
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InvoiceUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InvoiceUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InvoiceUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *InvoiceUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		v := invoice.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *InvoiceUpdate) check() error {
	if v, ok := iu.mutation.Value(); ok {
		if err := invoice.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "Invoice.value": %w`, err)}
		}
	}
	if v, ok := iu.mutation.State(); ok {
		if err := invoice.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Invoice.state": %w`, err)}
		}
	}
	if iu.mutation.JobCleared() && len(iu.mutation.JobIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Invoice.job"`)
	}
	return nil
}

func (iu *InvoiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(invoice.Table, invoice.Columns, sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Value(); ok {
		_spec.SetField(invoice.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.AddedValue(); ok {
		_spec.AddField(invoice.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := iu.mutation.State(); ok {
		_spec.SetField(invoice.FieldState, field.TypeEnum, value)
	}
	if value, ok := iu.mutation.IntervalNumber(); ok {
		_spec.SetField(invoice.FieldIntervalNumber, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedIntervalNumber(); ok {
		_spec.AddField(invoice.FieldIntervalNumber, field.TypeInt, value)
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(invoice.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InvoiceUpdateOne is the builder for updating a single Invoice entity.
type InvoiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InvoiceMutation
}

// SetValue sets the "value" field.
func (iuo *InvoiceUpdateOne) SetValue(f float64) *InvoiceUpdateOne {
	iuo.mutation.ResetValue()
	iuo.mutation.SetValue(f)
	return iuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableValue(f *float64) *InvoiceUpdateOne {
	if f != nil {
		iuo.SetValue(*f)
	}
	return iuo
}

// AddValue adds f to the "value" field.
func (iuo *InvoiceUpdateOne) AddValue(f float64) *InvoiceUpdateOne {
	iuo.mutation.AddValue(f)
	return iuo
}

// SetState sets the "state" field.
func (iuo *InvoiceUpdateOne) SetState(i invoice.State) *InvoiceUpdateOne {
	iuo.mutation.SetState(i)
	return iuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableState(i *invoice.State) *InvoiceUpdateOne {
	if i != nil {
		iuo.SetState(*i)
	}
	return iuo
}

// SetIntervalNumber sets the "interval_number" field.
func (iuo *InvoiceUpdateOne) SetIntervalNumber(i int) *InvoiceUpdateOne {
	iuo.mutation.ResetIntervalNumber()
	iuo.mutation.SetIntervalNumber(i)
	return iuo
}

// SetNillableIntervalNumber sets the "interval_number" field if the given value is not nil.
func (iuo *InvoiceUpdateOne) SetNillableIntervalNumber(i *int) *InvoiceUpdateOne {
	if i != nil {
		iuo.SetIntervalNumber(*i)
	}
	return iuo
}

// AddIntervalNumber adds i to the "interval_number" field.
func (iuo *InvoiceUpdateOne) AddIntervalNumber(i int) *InvoiceUpdateOne {
	iuo.mutation.AddIntervalNumber(i)
	return iuo
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *InvoiceUpdateOne) SetUpdatedAt(t time.Time) *InvoiceUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// Mutation returns the InvoiceMutation object of the builder.
func (iuo *InvoiceUpdateOne) Mutation() *InvoiceMutation {
	return iuo.mutation
}

// Where appends a list predicates to the InvoiceUpdate builder.
func (iuo *InvoiceUpdateOne) Where(ps ...predicate.Invoice) *InvoiceUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InvoiceUpdateOne) Select(field string, fields ...string) *InvoiceUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Invoice entity.
func (iuo *InvoiceUpdateOne) Save(ctx context.Context) (*Invoice, error) {
	iuo.defaults()
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InvoiceUpdateOne) SaveX(ctx context.Context) *Invoice {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InvoiceUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InvoiceUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *InvoiceUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		v := invoice.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *InvoiceUpdateOne) check() error {
	if v, ok := iuo.mutation.Value(); ok {
		if err := invoice.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "Invoice.value": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.State(); ok {
		if err := invoice.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Invoice.state": %w`, err)}
		}
	}
	if iuo.mutation.JobCleared() && len(iuo.mutation.JobIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Invoice.job"`)
	}
	return nil
}

func (iuo *InvoiceUpdateOne) sqlSave(ctx context.Context) (_node *Invoice, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(invoice.Table, invoice.Columns, sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Invoice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invoice.FieldID)
		for _, f := range fields {
			if !invoice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != invoice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Value(); ok {
		_spec.SetField(invoice.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.AddedValue(); ok {
		_spec.AddField(invoice.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := iuo.mutation.State(); ok {
		_spec.SetField(invoice.FieldState, field.TypeEnum, value)
	}
	if value, ok := iuo.mutation.IntervalNumber(); ok {
		_spec.SetField(invoice.FieldIntervalNumber, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedIntervalNumber(); ok {
		_spec.AddField(invoice.FieldIntervalNumber, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(invoice.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Invoice{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
