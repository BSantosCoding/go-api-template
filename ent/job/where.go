// Code generated by ent, DO NOT EDIT.

package job

import (
	"go-api-template/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldID, id))
}

// Rate applies equality check predicate on the "rate" field. It's identical to RateEQ.
func Rate(v float64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldRate, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldDuration, v))
}

// EmployerID applies equality check predicate on the "employer_id" field. It's identical to EmployerIDEQ.
func EmployerID(v uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldEmployerID, v))
}

// ContractorID applies equality check predicate on the "contractor_id" field. It's identical to ContractorIDEQ.
func ContractorID(v uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldContractorID, v))
}

// InvoiceInterval applies equality check predicate on the "invoice_interval" field. It's identical to InvoiceIntervalEQ.
func InvoiceInterval(v int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldInvoiceInterval, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldUpdatedAt, v))
}

// RateEQ applies the EQ predicate on the "rate" field.
func RateEQ(v float64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldRate, v))
}

// RateNEQ applies the NEQ predicate on the "rate" field.
func RateNEQ(v float64) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldRate, v))
}

// RateIn applies the In predicate on the "rate" field.
func RateIn(vs ...float64) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldRate, vs...))
}

// RateNotIn applies the NotIn predicate on the "rate" field.
func RateNotIn(vs ...float64) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldRate, vs...))
}

// RateGT applies the GT predicate on the "rate" field.
func RateGT(v float64) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldRate, v))
}

// RateGTE applies the GTE predicate on the "rate" field.
func RateGTE(v float64) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldRate, v))
}

// RateLT applies the LT predicate on the "rate" field.
func RateLT(v float64) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldRate, v))
}

// RateLTE applies the LTE predicate on the "rate" field.
func RateLTE(v float64) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldRate, v))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldDuration, v))
}

// EmployerIDEQ applies the EQ predicate on the "employer_id" field.
func EmployerIDEQ(v uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldEmployerID, v))
}

// EmployerIDNEQ applies the NEQ predicate on the "employer_id" field.
func EmployerIDNEQ(v uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldEmployerID, v))
}

// EmployerIDIn applies the In predicate on the "employer_id" field.
func EmployerIDIn(vs ...uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldEmployerID, vs...))
}

// EmployerIDNotIn applies the NotIn predicate on the "employer_id" field.
func EmployerIDNotIn(vs ...uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldEmployerID, vs...))
}

// ContractorIDEQ applies the EQ predicate on the "contractor_id" field.
func ContractorIDEQ(v uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldContractorID, v))
}

// ContractorIDNEQ applies the NEQ predicate on the "contractor_id" field.
func ContractorIDNEQ(v uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldContractorID, v))
}

// ContractorIDIn applies the In predicate on the "contractor_id" field.
func ContractorIDIn(vs ...uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldContractorID, vs...))
}

// ContractorIDNotIn applies the NotIn predicate on the "contractor_id" field.
func ContractorIDNotIn(vs ...uuid.UUID) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldContractorID, vs...))
}

// ContractorIDIsNil applies the IsNil predicate on the "contractor_id" field.
func ContractorIDIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldContractorID))
}

// ContractorIDNotNil applies the NotNil predicate on the "contractor_id" field.
func ContractorIDNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldContractorID))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v State) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v State) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...State) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...State) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldState, vs...))
}

// InvoiceIntervalEQ applies the EQ predicate on the "invoice_interval" field.
func InvoiceIntervalEQ(v int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldInvoiceInterval, v))
}

// InvoiceIntervalNEQ applies the NEQ predicate on the "invoice_interval" field.
func InvoiceIntervalNEQ(v int) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldInvoiceInterval, v))
}

// InvoiceIntervalIn applies the In predicate on the "invoice_interval" field.
func InvoiceIntervalIn(vs ...int) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldInvoiceInterval, vs...))
}

// InvoiceIntervalNotIn applies the NotIn predicate on the "invoice_interval" field.
func InvoiceIntervalNotIn(vs ...int) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldInvoiceInterval, vs...))
}

// InvoiceIntervalGT applies the GT predicate on the "invoice_interval" field.
func InvoiceIntervalGT(v int) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldInvoiceInterval, v))
}

// InvoiceIntervalGTE applies the GTE predicate on the "invoice_interval" field.
func InvoiceIntervalGTE(v int) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldInvoiceInterval, v))
}

// InvoiceIntervalLT applies the LT predicate on the "invoice_interval" field.
func InvoiceIntervalLT(v int) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldInvoiceInterval, v))
}

// InvoiceIntervalLTE applies the LTE predicate on the "invoice_interval" field.
func InvoiceIntervalLTE(v int) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldInvoiceInterval, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasEmployer applies the HasEdge predicate on the "employer" edge.
func HasEmployer() predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmployerTable, EmployerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployerWith applies the HasEdge predicate on the "employer" edge with a given conditions (other predicates).
func HasEmployerWith(preds ...predicate.User) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := newEmployerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContractor applies the HasEdge predicate on the "contractor" edge.
func HasContractor() predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ContractorTable, ContractorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContractorWith applies the HasEdge predicate on the "contractor" edge with a given conditions (other predicates).
func HasContractorWith(preds ...predicate.User) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := newContractorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInvoices applies the HasEdge predicate on the "invoices" edge.
func HasInvoices() predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InvoicesTable, InvoicesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInvoicesWith applies the HasEdge predicate on the "invoices" edge with a given conditions (other predicates).
func HasInvoicesWith(preds ...predicate.Invoice) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := newInvoicesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasApplications applies the HasEdge predicate on the "applications" edge.
func HasApplications() predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ApplicationsTable, ApplicationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApplicationsWith applies the HasEdge predicate on the "applications" edge with a given conditions (other predicates).
func HasApplicationsWith(preds ...predicate.JobApplication) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := newApplicationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Job) predicate.Job {
	return predicate.Job(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Job) predicate.Job {
	return predicate.Job(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Job) predicate.Job {
	return predicate.Job(sql.NotPredicates(p))
}
