// Code generated by ent, DO NOT EDIT.

package job

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the job type in the database.
	Label = "job"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRate holds the string denoting the rate field in the database.
	FieldRate = "rate"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldEmployerID holds the string denoting the employer_id field in the database.
	FieldEmployerID = "employer_id"
	// FieldContractorID holds the string denoting the contractor_id field in the database.
	FieldContractorID = "contractor_id"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldInvoiceInterval holds the string denoting the invoice_interval field in the database.
	FieldInvoiceInterval = "invoice_interval"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeEmployer holds the string denoting the employer edge name in mutations.
	EdgeEmployer = "employer"
	// EdgeContractor holds the string denoting the contractor edge name in mutations.
	EdgeContractor = "contractor"
	// EdgeInvoices holds the string denoting the invoices edge name in mutations.
	EdgeInvoices = "invoices"
	// EdgeApplications holds the string denoting the applications edge name in mutations.
	EdgeApplications = "applications"
	// Table holds the table name of the job in the database.
	Table = "jobs"
	// EmployerTable is the table that holds the employer relation/edge.
	EmployerTable = "jobs"
	// EmployerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	EmployerInverseTable = "users"
	// EmployerColumn is the table column denoting the employer relation/edge.
	EmployerColumn = "employer_id"
	// ContractorTable is the table that holds the contractor relation/edge.
	ContractorTable = "jobs"
	// ContractorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ContractorInverseTable = "users"
	// ContractorColumn is the table column denoting the contractor relation/edge.
	ContractorColumn = "contractor_id"
	// InvoicesTable is the table that holds the invoices relation/edge.
	InvoicesTable = "invoices"
	// InvoicesInverseTable is the table name for the Invoice entity.
	// It exists in this package in order to avoid circular dependency with the "invoice" package.
	InvoicesInverseTable = "invoices"
	// InvoicesColumn is the table column denoting the invoices relation/edge.
	InvoicesColumn = "job_id"
	// ApplicationsTable is the table that holds the applications relation/edge.
	ApplicationsTable = "job_application"
	// ApplicationsInverseTable is the table name for the JobApplication entity.
	// It exists in this package in order to avoid circular dependency with the "jobapplication" package.
	ApplicationsInverseTable = "job_application"
	// ApplicationsColumn is the table column denoting the applications relation/edge.
	ApplicationsColumn = "job_id"
)

// Columns holds all SQL columns for job fields.
var Columns = []string{
	FieldID,
	FieldRate,
	FieldDuration,
	FieldEmployerID,
	FieldContractorID,
	FieldState,
	FieldInvoiceInterval,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// RateValidator is a validator for the "rate" field. It is called by the builders before save.
	RateValidator func(float64) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// State defines the type for the "state" enum field.
type State string

// StateWaiting is the default value of the State enum.
const DefaultState = StateWaiting

// State values.
const (
	StateWaiting  State = "Waiting"
	StateOngoing  State = "Ongoing"
	StateComplete State = "Complete"
	StateArchived State = "Archived"
)

func (s State) String() string {
	return string(s)
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(s State) error {
	switch s {
	case StateWaiting, StateOngoing, StateComplete, StateArchived:
		return nil
	default:
		return fmt.Errorf("job: invalid enum value for state field: %q", s)
	}
}

// OrderOption defines the ordering options for the Job queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRate orders the results by the rate field.
func ByRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRate, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByEmployerID orders the results by the employer_id field.
func ByEmployerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployerID, opts...).ToFunc()
}

// ByContractorID orders the results by the contractor_id field.
func ByContractorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContractorID, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByInvoiceInterval orders the results by the invoice_interval field.
func ByInvoiceInterval(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvoiceInterval, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByEmployerField orders the results by employer field.
func ByEmployerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmployerStep(), sql.OrderByField(field, opts...))
	}
}

// ByContractorField orders the results by contractor field.
func ByContractorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContractorStep(), sql.OrderByField(field, opts...))
	}
}

// ByInvoicesCount orders the results by invoices count.
func ByInvoicesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInvoicesStep(), opts...)
	}
}

// ByInvoices orders the results by invoices terms.
func ByInvoices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInvoicesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByApplicationsCount orders the results by applications count.
func ByApplicationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newApplicationsStep(), opts...)
	}
}

// ByApplications orders the results by applications terms.
func ByApplications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplicationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEmployerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmployerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EmployerTable, EmployerColumn),
	)
}
func newContractorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContractorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ContractorTable, ContractorColumn),
	)
}
func newInvoicesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InvoicesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, InvoicesTable, InvoicesColumn),
	)
}
func newApplicationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplicationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ApplicationsTable, ApplicationsColumn),
	)
}
