// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-api-template/ent/job"
	"go-api-template/ent/jobapplication"
	"go-api-template/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// JobApplicationCreate is the builder for creating a JobApplication entity.
type JobApplicationCreate struct {
	config
	mutation *JobApplicationMutation
	hooks    []Hook
}

// SetJobID sets the "job_id" field.
func (jac *JobApplicationCreate) SetJobID(u uuid.UUID) *JobApplicationCreate {
	jac.mutation.SetJobID(u)
	return jac
}

// SetContractorID sets the "contractor_id" field.
func (jac *JobApplicationCreate) SetContractorID(u uuid.UUID) *JobApplicationCreate {
	jac.mutation.SetContractorID(u)
	return jac
}

// SetState sets the "state" field.
func (jac *JobApplicationCreate) SetState(j jobapplication.State) *JobApplicationCreate {
	jac.mutation.SetState(j)
	return jac
}

// SetNillableState sets the "state" field if the given value is not nil.
func (jac *JobApplicationCreate) SetNillableState(j *jobapplication.State) *JobApplicationCreate {
	if j != nil {
		jac.SetState(*j)
	}
	return jac
}

// SetCreatedAt sets the "created_at" field.
func (jac *JobApplicationCreate) SetCreatedAt(t time.Time) *JobApplicationCreate {
	jac.mutation.SetCreatedAt(t)
	return jac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jac *JobApplicationCreate) SetNillableCreatedAt(t *time.Time) *JobApplicationCreate {
	if t != nil {
		jac.SetCreatedAt(*t)
	}
	return jac
}

// SetUpdatedAt sets the "updated_at" field.
func (jac *JobApplicationCreate) SetUpdatedAt(t time.Time) *JobApplicationCreate {
	jac.mutation.SetUpdatedAt(t)
	return jac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (jac *JobApplicationCreate) SetNillableUpdatedAt(t *time.Time) *JobApplicationCreate {
	if t != nil {
		jac.SetUpdatedAt(*t)
	}
	return jac
}

// SetID sets the "id" field.
func (jac *JobApplicationCreate) SetID(u uuid.UUID) *JobApplicationCreate {
	jac.mutation.SetID(u)
	return jac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (jac *JobApplicationCreate) SetNillableID(u *uuid.UUID) *JobApplicationCreate {
	if u != nil {
		jac.SetID(*u)
	}
	return jac
}

// SetContractor sets the "contractor" edge to the User entity.
func (jac *JobApplicationCreate) SetContractor(u *User) *JobApplicationCreate {
	return jac.SetContractorID(u.ID)
}

// SetJob sets the "job" edge to the Job entity.
func (jac *JobApplicationCreate) SetJob(j *Job) *JobApplicationCreate {
	return jac.SetJobID(j.ID)
}

// Mutation returns the JobApplicationMutation object of the builder.
func (jac *JobApplicationCreate) Mutation() *JobApplicationMutation {
	return jac.mutation
}

// Save creates the JobApplication in the database.
func (jac *JobApplicationCreate) Save(ctx context.Context) (*JobApplication, error) {
	jac.defaults()
	return withHooks(ctx, jac.sqlSave, jac.mutation, jac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jac *JobApplicationCreate) SaveX(ctx context.Context) *JobApplication {
	v, err := jac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jac *JobApplicationCreate) Exec(ctx context.Context) error {
	_, err := jac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jac *JobApplicationCreate) ExecX(ctx context.Context) {
	if err := jac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jac *JobApplicationCreate) defaults() {
	if _, ok := jac.mutation.State(); !ok {
		v := jobapplication.DefaultState
		jac.mutation.SetState(v)
	}
	if _, ok := jac.mutation.CreatedAt(); !ok {
		v := jobapplication.DefaultCreatedAt()
		jac.mutation.SetCreatedAt(v)
	}
	if _, ok := jac.mutation.UpdatedAt(); !ok {
		v := jobapplication.DefaultUpdatedAt()
		jac.mutation.SetUpdatedAt(v)
	}
	if _, ok := jac.mutation.ID(); !ok {
		v := jobapplication.DefaultID()
		jac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jac *JobApplicationCreate) check() error {
	if _, ok := jac.mutation.JobID(); !ok {
		return &ValidationError{Name: "job_id", err: errors.New(`ent: missing required field "JobApplication.job_id"`)}
	}
	if _, ok := jac.mutation.ContractorID(); !ok {
		return &ValidationError{Name: "contractor_id", err: errors.New(`ent: missing required field "JobApplication.contractor_id"`)}
	}
	if _, ok := jac.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "JobApplication.state"`)}
	}
	if v, ok := jac.mutation.State(); ok {
		if err := jobapplication.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "JobApplication.state": %w`, err)}
		}
	}
	if _, ok := jac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "JobApplication.created_at"`)}
	}
	if _, ok := jac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "JobApplication.updated_at"`)}
	}
	if len(jac.mutation.ContractorIDs()) == 0 {
		return &ValidationError{Name: "contractor", err: errors.New(`ent: missing required edge "JobApplication.contractor"`)}
	}
	if len(jac.mutation.JobIDs()) == 0 {
		return &ValidationError{Name: "job", err: errors.New(`ent: missing required edge "JobApplication.job"`)}
	}
	return nil
}

func (jac *JobApplicationCreate) sqlSave(ctx context.Context) (*JobApplication, error) {
	if err := jac.check(); err != nil {
		return nil, err
	}
	_node, _spec := jac.createSpec()
	if err := sqlgraph.CreateNode(ctx, jac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	jac.mutation.id = &_node.ID
	jac.mutation.done = true
	return _node, nil
}

func (jac *JobApplicationCreate) createSpec() (*JobApplication, *sqlgraph.CreateSpec) {
	var (
		_node = &JobApplication{config: jac.config}
		_spec = sqlgraph.NewCreateSpec(jobapplication.Table, sqlgraph.NewFieldSpec(jobapplication.FieldID, field.TypeUUID))
	)
	if id, ok := jac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := jac.mutation.State(); ok {
		_spec.SetField(jobapplication.FieldState, field.TypeEnum, value)
		_node.State = value
	}
	if value, ok := jac.mutation.CreatedAt(); ok {
		_spec.SetField(jobapplication.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jac.mutation.UpdatedAt(); ok {
		_spec.SetField(jobapplication.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := jac.mutation.ContractorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobapplication.ContractorTable,
			Columns: []string{jobapplication.ContractorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ContractorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jac.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobapplication.JobTable,
			Columns: []string{jobapplication.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.JobID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// JobApplicationCreateBulk is the builder for creating many JobApplication entities in bulk.
type JobApplicationCreateBulk struct {
	config
	err      error
	builders []*JobApplicationCreate
}

// Save creates the JobApplication entities in the database.
func (jacb *JobApplicationCreateBulk) Save(ctx context.Context) ([]*JobApplication, error) {
	if jacb.err != nil {
		return nil, jacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(jacb.builders))
	nodes := make([]*JobApplication, len(jacb.builders))
	mutators := make([]Mutator, len(jacb.builders))
	for i := range jacb.builders {
		func(i int, root context.Context) {
			builder := jacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobApplicationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jacb *JobApplicationCreateBulk) SaveX(ctx context.Context) []*JobApplication {
	v, err := jacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jacb *JobApplicationCreateBulk) Exec(ctx context.Context) error {
	_, err := jacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jacb *JobApplicationCreateBulk) ExecX(ctx context.Context) {
	if err := jacb.Exec(ctx); err != nil {
		panic(err)
	}
}
