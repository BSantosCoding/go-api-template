// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-api-template/ent/invoice"
	"go-api-template/ent/job"
	"go-api-template/ent/jobapplication"
	"go-api-template/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// JobCreate is the builder for creating a Job entity.
type JobCreate struct {
	config
	mutation *JobMutation
	hooks    []Hook
}

// SetRate sets the "rate" field.
func (jc *JobCreate) SetRate(f float64) *JobCreate {
	jc.mutation.SetRate(f)
	return jc
}

// SetDuration sets the "duration" field.
func (jc *JobCreate) SetDuration(i int) *JobCreate {
	jc.mutation.SetDuration(i)
	return jc
}

// SetEmployerID sets the "employer_id" field.
func (jc *JobCreate) SetEmployerID(u uuid.UUID) *JobCreate {
	jc.mutation.SetEmployerID(u)
	return jc
}

// SetContractorID sets the "contractor_id" field.
func (jc *JobCreate) SetContractorID(u uuid.UUID) *JobCreate {
	jc.mutation.SetContractorID(u)
	return jc
}

// SetNillableContractorID sets the "contractor_id" field if the given value is not nil.
func (jc *JobCreate) SetNillableContractorID(u *uuid.UUID) *JobCreate {
	if u != nil {
		jc.SetContractorID(*u)
	}
	return jc
}

// SetState sets the "state" field.
func (jc *JobCreate) SetState(j job.State) *JobCreate {
	jc.mutation.SetState(j)
	return jc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (jc *JobCreate) SetNillableState(j *job.State) *JobCreate {
	if j != nil {
		jc.SetState(*j)
	}
	return jc
}

// SetInvoiceInterval sets the "invoice_interval" field.
func (jc *JobCreate) SetInvoiceInterval(i int) *JobCreate {
	jc.mutation.SetInvoiceInterval(i)
	return jc
}

// SetCreatedAt sets the "created_at" field.
func (jc *JobCreate) SetCreatedAt(t time.Time) *JobCreate {
	jc.mutation.SetCreatedAt(t)
	return jc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jc *JobCreate) SetNillableCreatedAt(t *time.Time) *JobCreate {
	if t != nil {
		jc.SetCreatedAt(*t)
	}
	return jc
}

// SetUpdatedAt sets the "updated_at" field.
func (jc *JobCreate) SetUpdatedAt(t time.Time) *JobCreate {
	jc.mutation.SetUpdatedAt(t)
	return jc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (jc *JobCreate) SetNillableUpdatedAt(t *time.Time) *JobCreate {
	if t != nil {
		jc.SetUpdatedAt(*t)
	}
	return jc
}

// SetID sets the "id" field.
func (jc *JobCreate) SetID(u uuid.UUID) *JobCreate {
	jc.mutation.SetID(u)
	return jc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (jc *JobCreate) SetNillableID(u *uuid.UUID) *JobCreate {
	if u != nil {
		jc.SetID(*u)
	}
	return jc
}

// SetEmployer sets the "employer" edge to the User entity.
func (jc *JobCreate) SetEmployer(u *User) *JobCreate {
	return jc.SetEmployerID(u.ID)
}

// SetContractor sets the "contractor" edge to the User entity.
func (jc *JobCreate) SetContractor(u *User) *JobCreate {
	return jc.SetContractorID(u.ID)
}

// AddInvoiceIDs adds the "invoices" edge to the Invoice entity by IDs.
func (jc *JobCreate) AddInvoiceIDs(ids ...uuid.UUID) *JobCreate {
	jc.mutation.AddInvoiceIDs(ids...)
	return jc
}

// AddInvoices adds the "invoices" edges to the Invoice entity.
func (jc *JobCreate) AddInvoices(i ...*Invoice) *JobCreate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return jc.AddInvoiceIDs(ids...)
}

// AddApplicationIDs adds the "applications" edge to the JobApplication entity by IDs.
func (jc *JobCreate) AddApplicationIDs(ids ...uuid.UUID) *JobCreate {
	jc.mutation.AddApplicationIDs(ids...)
	return jc
}

// AddApplications adds the "applications" edges to the JobApplication entity.
func (jc *JobCreate) AddApplications(j ...*JobApplication) *JobCreate {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return jc.AddApplicationIDs(ids...)
}

// Mutation returns the JobMutation object of the builder.
func (jc *JobCreate) Mutation() *JobMutation {
	return jc.mutation
}

// Save creates the Job in the database.
func (jc *JobCreate) Save(ctx context.Context) (*Job, error) {
	jc.defaults()
	return withHooks(ctx, jc.sqlSave, jc.mutation, jc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jc *JobCreate) SaveX(ctx context.Context) *Job {
	v, err := jc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jc *JobCreate) Exec(ctx context.Context) error {
	_, err := jc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jc *JobCreate) ExecX(ctx context.Context) {
	if err := jc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jc *JobCreate) defaults() {
	if _, ok := jc.mutation.State(); !ok {
		v := job.DefaultState
		jc.mutation.SetState(v)
	}
	if _, ok := jc.mutation.CreatedAt(); !ok {
		v := job.DefaultCreatedAt()
		jc.mutation.SetCreatedAt(v)
	}
	if _, ok := jc.mutation.UpdatedAt(); !ok {
		v := job.DefaultUpdatedAt()
		jc.mutation.SetUpdatedAt(v)
	}
	if _, ok := jc.mutation.ID(); !ok {
		v := job.DefaultID()
		jc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jc *JobCreate) check() error {
	if _, ok := jc.mutation.Rate(); !ok {
		return &ValidationError{Name: "rate", err: errors.New(`ent: missing required field "Job.rate"`)}
	}
	if v, ok := jc.mutation.Rate(); ok {
		if err := job.RateValidator(v); err != nil {
			return &ValidationError{Name: "rate", err: fmt.Errorf(`ent: validator failed for field "Job.rate": %w`, err)}
		}
	}
	if _, ok := jc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "Job.duration"`)}
	}
	if _, ok := jc.mutation.EmployerID(); !ok {
		return &ValidationError{Name: "employer_id", err: errors.New(`ent: missing required field "Job.employer_id"`)}
	}
	if _, ok := jc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Job.state"`)}
	}
	if v, ok := jc.mutation.State(); ok {
		if err := job.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Job.state": %w`, err)}
		}
	}
	if _, ok := jc.mutation.InvoiceInterval(); !ok {
		return &ValidationError{Name: "invoice_interval", err: errors.New(`ent: missing required field "Job.invoice_interval"`)}
	}
	if _, ok := jc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Job.created_at"`)}
	}
	if _, ok := jc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Job.updated_at"`)}
	}
	if len(jc.mutation.EmployerIDs()) == 0 {
		return &ValidationError{Name: "employer", err: errors.New(`ent: missing required edge "Job.employer"`)}
	}
	return nil
}

func (jc *JobCreate) sqlSave(ctx context.Context) (*Job, error) {
	if err := jc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	jc.mutation.id = &_node.ID
	jc.mutation.done = true
	return _node, nil
}

func (jc *JobCreate) createSpec() (*Job, *sqlgraph.CreateSpec) {
	var (
		_node = &Job{config: jc.config}
		_spec = sqlgraph.NewCreateSpec(job.Table, sqlgraph.NewFieldSpec(job.FieldID, field.TypeUUID))
	)
	if id, ok := jc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := jc.mutation.Rate(); ok {
		_spec.SetField(job.FieldRate, field.TypeFloat64, value)
		_node.Rate = value
	}
	if value, ok := jc.mutation.Duration(); ok {
		_spec.SetField(job.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if value, ok := jc.mutation.State(); ok {
		_spec.SetField(job.FieldState, field.TypeEnum, value)
		_node.State = value
	}
	if value, ok := jc.mutation.InvoiceInterval(); ok {
		_spec.SetField(job.FieldInvoiceInterval, field.TypeInt, value)
		_node.InvoiceInterval = value
	}
	if value, ok := jc.mutation.CreatedAt(); ok {
		_spec.SetField(job.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jc.mutation.UpdatedAt(); ok {
		_spec.SetField(job.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := jc.mutation.EmployerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.EmployerTable,
			Columns: []string{job.EmployerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EmployerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.ContractorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.ContractorTable,
			Columns: []string{job.ContractorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ContractorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.InvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.InvoicesTable,
			Columns: []string{job.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ApplicationsTable,
			Columns: []string{job.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobapplication.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// JobCreateBulk is the builder for creating many Job entities in bulk.
type JobCreateBulk struct {
	config
	err      error
	builders []*JobCreate
}

// Save creates the Job entities in the database.
func (jcb *JobCreateBulk) Save(ctx context.Context) ([]*Job, error) {
	if jcb.err != nil {
		return nil, jcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(jcb.builders))
	nodes := make([]*Job, len(jcb.builders))
	mutators := make([]Mutator, len(jcb.builders))
	for i := range jcb.builders {
		func(i int, root context.Context) {
			builder := jcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jcb *JobCreateBulk) SaveX(ctx context.Context) []*Job {
	v, err := jcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jcb *JobCreateBulk) Exec(ctx context.Context) error {
	_, err := jcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jcb *JobCreateBulk) ExecX(ctx context.Context) {
	if err := jcb.Exec(ctx); err != nil {
		panic(err)
	}
}
