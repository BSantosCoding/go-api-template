// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-api-template/ent/invoice"
	"go-api-template/ent/job"
	"go-api-template/ent/jobapplication"
	"go-api-template/ent/predicate"
	"go-api-template/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// JobUpdate is the builder for updating Job entities.
type JobUpdate struct {
	config
	hooks    []Hook
	mutation *JobMutation
}

// Where appends a list predicates to the JobUpdate builder.
func (ju *JobUpdate) Where(ps ...predicate.Job) *JobUpdate {
	ju.mutation.Where(ps...)
	return ju
}

// SetRate sets the "rate" field.
func (ju *JobUpdate) SetRate(f float64) *JobUpdate {
	ju.mutation.ResetRate()
	ju.mutation.SetRate(f)
	return ju
}

// SetNillableRate sets the "rate" field if the given value is not nil.
func (ju *JobUpdate) SetNillableRate(f *float64) *JobUpdate {
	if f != nil {
		ju.SetRate(*f)
	}
	return ju
}

// AddRate adds f to the "rate" field.
func (ju *JobUpdate) AddRate(f float64) *JobUpdate {
	ju.mutation.AddRate(f)
	return ju
}

// SetDuration sets the "duration" field.
func (ju *JobUpdate) SetDuration(i int) *JobUpdate {
	ju.mutation.ResetDuration()
	ju.mutation.SetDuration(i)
	return ju
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (ju *JobUpdate) SetNillableDuration(i *int) *JobUpdate {
	if i != nil {
		ju.SetDuration(*i)
	}
	return ju
}

// AddDuration adds i to the "duration" field.
func (ju *JobUpdate) AddDuration(i int) *JobUpdate {
	ju.mutation.AddDuration(i)
	return ju
}

// SetContractorID sets the "contractor_id" field.
func (ju *JobUpdate) SetContractorID(u uuid.UUID) *JobUpdate {
	ju.mutation.SetContractorID(u)
	return ju
}

// SetNillableContractorID sets the "contractor_id" field if the given value is not nil.
func (ju *JobUpdate) SetNillableContractorID(u *uuid.UUID) *JobUpdate {
	if u != nil {
		ju.SetContractorID(*u)
	}
	return ju
}

// ClearContractorID clears the value of the "contractor_id" field.
func (ju *JobUpdate) ClearContractorID() *JobUpdate {
	ju.mutation.ClearContractorID()
	return ju
}

// SetState sets the "state" field.
func (ju *JobUpdate) SetState(j job.State) *JobUpdate {
	ju.mutation.SetState(j)
	return ju
}

// SetNillableState sets the "state" field if the given value is not nil.
func (ju *JobUpdate) SetNillableState(j *job.State) *JobUpdate {
	if j != nil {
		ju.SetState(*j)
	}
	return ju
}

// SetInvoiceInterval sets the "invoice_interval" field.
func (ju *JobUpdate) SetInvoiceInterval(i int) *JobUpdate {
	ju.mutation.ResetInvoiceInterval()
	ju.mutation.SetInvoiceInterval(i)
	return ju
}

// SetNillableInvoiceInterval sets the "invoice_interval" field if the given value is not nil.
func (ju *JobUpdate) SetNillableInvoiceInterval(i *int) *JobUpdate {
	if i != nil {
		ju.SetInvoiceInterval(*i)
	}
	return ju
}

// AddInvoiceInterval adds i to the "invoice_interval" field.
func (ju *JobUpdate) AddInvoiceInterval(i int) *JobUpdate {
	ju.mutation.AddInvoiceInterval(i)
	return ju
}

// SetUpdatedAt sets the "updated_at" field.
func (ju *JobUpdate) SetUpdatedAt(t time.Time) *JobUpdate {
	ju.mutation.SetUpdatedAt(t)
	return ju
}

// SetContractor sets the "contractor" edge to the User entity.
func (ju *JobUpdate) SetContractor(u *User) *JobUpdate {
	return ju.SetContractorID(u.ID)
}

// AddInvoiceIDs adds the "invoices" edge to the Invoice entity by IDs.
func (ju *JobUpdate) AddInvoiceIDs(ids ...uuid.UUID) *JobUpdate {
	ju.mutation.AddInvoiceIDs(ids...)
	return ju
}

// AddInvoices adds the "invoices" edges to the Invoice entity.
func (ju *JobUpdate) AddInvoices(i ...*Invoice) *JobUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ju.AddInvoiceIDs(ids...)
}

// AddApplicationIDs adds the "applications" edge to the JobApplication entity by IDs.
func (ju *JobUpdate) AddApplicationIDs(ids ...uuid.UUID) *JobUpdate {
	ju.mutation.AddApplicationIDs(ids...)
	return ju
}

// AddApplications adds the "applications" edges to the JobApplication entity.
func (ju *JobUpdate) AddApplications(j ...*JobApplication) *JobUpdate {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ju.AddApplicationIDs(ids...)
}

// Mutation returns the JobMutation object of the builder.
func (ju *JobUpdate) Mutation() *JobMutation {
	return ju.mutation
}

// ClearContractor clears the "contractor" edge to the User entity.
func (ju *JobUpdate) ClearContractor() *JobUpdate {
	ju.mutation.ClearContractor()
	return ju
}

// ClearInvoices clears all "invoices" edges to the Invoice entity.
func (ju *JobUpdate) ClearInvoices() *JobUpdate {
	ju.mutation.ClearInvoices()
	return ju
}

// RemoveInvoiceIDs removes the "invoices" edge to Invoice entities by IDs.
func (ju *JobUpdate) RemoveInvoiceIDs(ids ...uuid.UUID) *JobUpdate {
	ju.mutation.RemoveInvoiceIDs(ids...)
	return ju
}

// RemoveInvoices removes "invoices" edges to Invoice entities.
func (ju *JobUpdate) RemoveInvoices(i ...*Invoice) *JobUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ju.RemoveInvoiceIDs(ids...)
}

// ClearApplications clears all "applications" edges to the JobApplication entity.
func (ju *JobUpdate) ClearApplications() *JobUpdate {
	ju.mutation.ClearApplications()
	return ju
}

// RemoveApplicationIDs removes the "applications" edge to JobApplication entities by IDs.
func (ju *JobUpdate) RemoveApplicationIDs(ids ...uuid.UUID) *JobUpdate {
	ju.mutation.RemoveApplicationIDs(ids...)
	return ju
}

// RemoveApplications removes "applications" edges to JobApplication entities.
func (ju *JobUpdate) RemoveApplications(j ...*JobApplication) *JobUpdate {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ju.RemoveApplicationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ju *JobUpdate) Save(ctx context.Context) (int, error) {
	ju.defaults()
	return withHooks(ctx, ju.sqlSave, ju.mutation, ju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ju *JobUpdate) SaveX(ctx context.Context) int {
	affected, err := ju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ju *JobUpdate) Exec(ctx context.Context) error {
	_, err := ju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ju *JobUpdate) ExecX(ctx context.Context) {
	if err := ju.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ju *JobUpdate) defaults() {
	if _, ok := ju.mutation.UpdatedAt(); !ok {
		v := job.UpdateDefaultUpdatedAt()
		ju.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ju *JobUpdate) check() error {
	if v, ok := ju.mutation.Rate(); ok {
		if err := job.RateValidator(v); err != nil {
			return &ValidationError{Name: "rate", err: fmt.Errorf(`ent: validator failed for field "Job.rate": %w`, err)}
		}
	}
	if v, ok := ju.mutation.State(); ok {
		if err := job.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Job.state": %w`, err)}
		}
	}
	if ju.mutation.EmployerCleared() && len(ju.mutation.EmployerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Job.employer"`)
	}
	return nil
}

func (ju *JobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ju.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeUUID))
	if ps := ju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ju.mutation.Rate(); ok {
		_spec.SetField(job.FieldRate, field.TypeFloat64, value)
	}
	if value, ok := ju.mutation.AddedRate(); ok {
		_spec.AddField(job.FieldRate, field.TypeFloat64, value)
	}
	if value, ok := ju.mutation.Duration(); ok {
		_spec.SetField(job.FieldDuration, field.TypeInt, value)
	}
	if value, ok := ju.mutation.AddedDuration(); ok {
		_spec.AddField(job.FieldDuration, field.TypeInt, value)
	}
	if value, ok := ju.mutation.State(); ok {
		_spec.SetField(job.FieldState, field.TypeEnum, value)
	}
	if value, ok := ju.mutation.InvoiceInterval(); ok {
		_spec.SetField(job.FieldInvoiceInterval, field.TypeInt, value)
	}
	if value, ok := ju.mutation.AddedInvoiceInterval(); ok {
		_spec.AddField(job.FieldInvoiceInterval, field.TypeInt, value)
	}
	if value, ok := ju.mutation.UpdatedAt(); ok {
		_spec.SetField(job.FieldUpdatedAt, field.TypeTime, value)
	}
	if ju.mutation.ContractorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.ContractorTable,
			Columns: []string{job.ContractorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.ContractorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.ContractorTable,
			Columns: []string{job.ContractorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.InvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.InvoicesTable,
			Columns: []string{job.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.RemovedInvoicesIDs(); len(nodes) > 0 && !ju.mutation.InvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.InvoicesTable,
			Columns: []string{job.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.InvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.InvoicesTable,
			Columns: []string{job.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ApplicationsTable,
			Columns: []string{job.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobapplication.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.RemovedApplicationsIDs(); len(nodes) > 0 && !ju.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ApplicationsTable,
			Columns: []string{job.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobapplication.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ApplicationsTable,
			Columns: []string{job.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobapplication.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ju.mutation.done = true
	return n, nil
}

// JobUpdateOne is the builder for updating a single Job entity.
type JobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobMutation
}

// SetRate sets the "rate" field.
func (juo *JobUpdateOne) SetRate(f float64) *JobUpdateOne {
	juo.mutation.ResetRate()
	juo.mutation.SetRate(f)
	return juo
}

// SetNillableRate sets the "rate" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableRate(f *float64) *JobUpdateOne {
	if f != nil {
		juo.SetRate(*f)
	}
	return juo
}

// AddRate adds f to the "rate" field.
func (juo *JobUpdateOne) AddRate(f float64) *JobUpdateOne {
	juo.mutation.AddRate(f)
	return juo
}

// SetDuration sets the "duration" field.
func (juo *JobUpdateOne) SetDuration(i int) *JobUpdateOne {
	juo.mutation.ResetDuration()
	juo.mutation.SetDuration(i)
	return juo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableDuration(i *int) *JobUpdateOne {
	if i != nil {
		juo.SetDuration(*i)
	}
	return juo
}

// AddDuration adds i to the "duration" field.
func (juo *JobUpdateOne) AddDuration(i int) *JobUpdateOne {
	juo.mutation.AddDuration(i)
	return juo
}

// SetContractorID sets the "contractor_id" field.
func (juo *JobUpdateOne) SetContractorID(u uuid.UUID) *JobUpdateOne {
	juo.mutation.SetContractorID(u)
	return juo
}

// SetNillableContractorID sets the "contractor_id" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableContractorID(u *uuid.UUID) *JobUpdateOne {
	if u != nil {
		juo.SetContractorID(*u)
	}
	return juo
}

// ClearContractorID clears the value of the "contractor_id" field.
func (juo *JobUpdateOne) ClearContractorID() *JobUpdateOne {
	juo.mutation.ClearContractorID()
	return juo
}

// SetState sets the "state" field.
func (juo *JobUpdateOne) SetState(j job.State) *JobUpdateOne {
	juo.mutation.SetState(j)
	return juo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableState(j *job.State) *JobUpdateOne {
	if j != nil {
		juo.SetState(*j)
	}
	return juo
}

// SetInvoiceInterval sets the "invoice_interval" field.
func (juo *JobUpdateOne) SetInvoiceInterval(i int) *JobUpdateOne {
	juo.mutation.ResetInvoiceInterval()
	juo.mutation.SetInvoiceInterval(i)
	return juo
}

// SetNillableInvoiceInterval sets the "invoice_interval" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableInvoiceInterval(i *int) *JobUpdateOne {
	if i != nil {
		juo.SetInvoiceInterval(*i)
	}
	return juo
}

// AddInvoiceInterval adds i to the "invoice_interval" field.
func (juo *JobUpdateOne) AddInvoiceInterval(i int) *JobUpdateOne {
	juo.mutation.AddInvoiceInterval(i)
	return juo
}

// SetUpdatedAt sets the "updated_at" field.
func (juo *JobUpdateOne) SetUpdatedAt(t time.Time) *JobUpdateOne {
	juo.mutation.SetUpdatedAt(t)
	return juo
}

// SetContractor sets the "contractor" edge to the User entity.
func (juo *JobUpdateOne) SetContractor(u *User) *JobUpdateOne {
	return juo.SetContractorID(u.ID)
}

// AddInvoiceIDs adds the "invoices" edge to the Invoice entity by IDs.
func (juo *JobUpdateOne) AddInvoiceIDs(ids ...uuid.UUID) *JobUpdateOne {
	juo.mutation.AddInvoiceIDs(ids...)
	return juo
}

// AddInvoices adds the "invoices" edges to the Invoice entity.
func (juo *JobUpdateOne) AddInvoices(i ...*Invoice) *JobUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return juo.AddInvoiceIDs(ids...)
}

// AddApplicationIDs adds the "applications" edge to the JobApplication entity by IDs.
func (juo *JobUpdateOne) AddApplicationIDs(ids ...uuid.UUID) *JobUpdateOne {
	juo.mutation.AddApplicationIDs(ids...)
	return juo
}

// AddApplications adds the "applications" edges to the JobApplication entity.
func (juo *JobUpdateOne) AddApplications(j ...*JobApplication) *JobUpdateOne {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return juo.AddApplicationIDs(ids...)
}

// Mutation returns the JobMutation object of the builder.
func (juo *JobUpdateOne) Mutation() *JobMutation {
	return juo.mutation
}

// ClearContractor clears the "contractor" edge to the User entity.
func (juo *JobUpdateOne) ClearContractor() *JobUpdateOne {
	juo.mutation.ClearContractor()
	return juo
}

// ClearInvoices clears all "invoices" edges to the Invoice entity.
func (juo *JobUpdateOne) ClearInvoices() *JobUpdateOne {
	juo.mutation.ClearInvoices()
	return juo
}

// RemoveInvoiceIDs removes the "invoices" edge to Invoice entities by IDs.
func (juo *JobUpdateOne) RemoveInvoiceIDs(ids ...uuid.UUID) *JobUpdateOne {
	juo.mutation.RemoveInvoiceIDs(ids...)
	return juo
}

// RemoveInvoices removes "invoices" edges to Invoice entities.
func (juo *JobUpdateOne) RemoveInvoices(i ...*Invoice) *JobUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return juo.RemoveInvoiceIDs(ids...)
}

// ClearApplications clears all "applications" edges to the JobApplication entity.
func (juo *JobUpdateOne) ClearApplications() *JobUpdateOne {
	juo.mutation.ClearApplications()
	return juo
}

// RemoveApplicationIDs removes the "applications" edge to JobApplication entities by IDs.
func (juo *JobUpdateOne) RemoveApplicationIDs(ids ...uuid.UUID) *JobUpdateOne {
	juo.mutation.RemoveApplicationIDs(ids...)
	return juo
}

// RemoveApplications removes "applications" edges to JobApplication entities.
func (juo *JobUpdateOne) RemoveApplications(j ...*JobApplication) *JobUpdateOne {
	ids := make([]uuid.UUID, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return juo.RemoveApplicationIDs(ids...)
}

// Where appends a list predicates to the JobUpdate builder.
func (juo *JobUpdateOne) Where(ps ...predicate.Job) *JobUpdateOne {
	juo.mutation.Where(ps...)
	return juo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (juo *JobUpdateOne) Select(field string, fields ...string) *JobUpdateOne {
	juo.fields = append([]string{field}, fields...)
	return juo
}

// Save executes the query and returns the updated Job entity.
func (juo *JobUpdateOne) Save(ctx context.Context) (*Job, error) {
	juo.defaults()
	return withHooks(ctx, juo.sqlSave, juo.mutation, juo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (juo *JobUpdateOne) SaveX(ctx context.Context) *Job {
	node, err := juo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (juo *JobUpdateOne) Exec(ctx context.Context) error {
	_, err := juo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (juo *JobUpdateOne) ExecX(ctx context.Context) {
	if err := juo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (juo *JobUpdateOne) defaults() {
	if _, ok := juo.mutation.UpdatedAt(); !ok {
		v := job.UpdateDefaultUpdatedAt()
		juo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (juo *JobUpdateOne) check() error {
	if v, ok := juo.mutation.Rate(); ok {
		if err := job.RateValidator(v); err != nil {
			return &ValidationError{Name: "rate", err: fmt.Errorf(`ent: validator failed for field "Job.rate": %w`, err)}
		}
	}
	if v, ok := juo.mutation.State(); ok {
		if err := job.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Job.state": %w`, err)}
		}
	}
	if juo.mutation.EmployerCleared() && len(juo.mutation.EmployerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Job.employer"`)
	}
	return nil
}

func (juo *JobUpdateOne) sqlSave(ctx context.Context) (_node *Job, err error) {
	if err := juo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeUUID))
	id, ok := juo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Job.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := juo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, job.FieldID)
		for _, f := range fields {
			if !job.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != job.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := juo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := juo.mutation.Rate(); ok {
		_spec.SetField(job.FieldRate, field.TypeFloat64, value)
	}
	if value, ok := juo.mutation.AddedRate(); ok {
		_spec.AddField(job.FieldRate, field.TypeFloat64, value)
	}
	if value, ok := juo.mutation.Duration(); ok {
		_spec.SetField(job.FieldDuration, field.TypeInt, value)
	}
	if value, ok := juo.mutation.AddedDuration(); ok {
		_spec.AddField(job.FieldDuration, field.TypeInt, value)
	}
	if value, ok := juo.mutation.State(); ok {
		_spec.SetField(job.FieldState, field.TypeEnum, value)
	}
	if value, ok := juo.mutation.InvoiceInterval(); ok {
		_spec.SetField(job.FieldInvoiceInterval, field.TypeInt, value)
	}
	if value, ok := juo.mutation.AddedInvoiceInterval(); ok {
		_spec.AddField(job.FieldInvoiceInterval, field.TypeInt, value)
	}
	if value, ok := juo.mutation.UpdatedAt(); ok {
		_spec.SetField(job.FieldUpdatedAt, field.TypeTime, value)
	}
	if juo.mutation.ContractorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.ContractorTable,
			Columns: []string{job.ContractorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.ContractorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.ContractorTable,
			Columns: []string{job.ContractorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.InvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.InvoicesTable,
			Columns: []string{job.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.RemovedInvoicesIDs(); len(nodes) > 0 && !juo.mutation.InvoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.InvoicesTable,
			Columns: []string{job.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.InvoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.InvoicesTable,
			Columns: []string{job.InvoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ApplicationsTable,
			Columns: []string{job.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobapplication.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.RemovedApplicationsIDs(); len(nodes) > 0 && !juo.mutation.ApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ApplicationsTable,
			Columns: []string{job.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobapplication.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.ApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.ApplicationsTable,
			Columns: []string{job.ApplicationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobapplication.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Job{config: juo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, juo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	juo.mutation.done = true
	return _node, nil
}
