// Code generated by ent, DO NOT EDIT.

package jobapplication

import (
	"go-api-template/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldLTE(FieldID, id))
}

// JobID applies equality check predicate on the "job_id" field. It's identical to JobIDEQ.
func JobID(v uuid.UUID) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldEQ(FieldJobID, v))
}

// ContractorID applies equality check predicate on the "contractor_id" field. It's identical to ContractorIDEQ.
func ContractorID(v uuid.UUID) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldEQ(FieldContractorID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldEQ(FieldUpdatedAt, v))
}

// JobIDEQ applies the EQ predicate on the "job_id" field.
func JobIDEQ(v uuid.UUID) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldEQ(FieldJobID, v))
}

// JobIDNEQ applies the NEQ predicate on the "job_id" field.
func JobIDNEQ(v uuid.UUID) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldNEQ(FieldJobID, v))
}

// JobIDIn applies the In predicate on the "job_id" field.
func JobIDIn(vs ...uuid.UUID) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldIn(FieldJobID, vs...))
}

// JobIDNotIn applies the NotIn predicate on the "job_id" field.
func JobIDNotIn(vs ...uuid.UUID) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldNotIn(FieldJobID, vs...))
}

// ContractorIDEQ applies the EQ predicate on the "contractor_id" field.
func ContractorIDEQ(v uuid.UUID) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldEQ(FieldContractorID, v))
}

// ContractorIDNEQ applies the NEQ predicate on the "contractor_id" field.
func ContractorIDNEQ(v uuid.UUID) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldNEQ(FieldContractorID, v))
}

// ContractorIDIn applies the In predicate on the "contractor_id" field.
func ContractorIDIn(vs ...uuid.UUID) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldIn(FieldContractorID, vs...))
}

// ContractorIDNotIn applies the NotIn predicate on the "contractor_id" field.
func ContractorIDNotIn(vs ...uuid.UUID) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldNotIn(FieldContractorID, vs...))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v State) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v State) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...State) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...State) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldNotIn(FieldState, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.JobApplication {
	return predicate.JobApplication(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasContractor applies the HasEdge predicate on the "contractor" edge.
func HasContractor() predicate.JobApplication {
	return predicate.JobApplication(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ContractorTable, ContractorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContractorWith applies the HasEdge predicate on the "contractor" edge with a given conditions (other predicates).
func HasContractorWith(preds ...predicate.User) predicate.JobApplication {
	return predicate.JobApplication(func(s *sql.Selector) {
		step := newContractorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJob applies the HasEdge predicate on the "job" edge.
func HasJob() predicate.JobApplication {
	return predicate.JobApplication(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, JobTable, JobColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobWith applies the HasEdge predicate on the "job" edge with a given conditions (other predicates).
func HasJobWith(preds ...predicate.Job) predicate.JobApplication {
	return predicate.JobApplication(func(s *sql.Selector) {
		step := newJobStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.JobApplication) predicate.JobApplication {
	return predicate.JobApplication(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.JobApplication) predicate.JobApplication {
	return predicate.JobApplication(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.JobApplication) predicate.JobApplication {
	return predicate.JobApplication(sql.NotPredicates(p))
}
