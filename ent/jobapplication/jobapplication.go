// Code generated by ent, DO NOT EDIT.

package jobapplication

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the jobapplication type in the database.
	Label = "job_application"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldJobID holds the string denoting the job_id field in the database.
	FieldJobID = "job_id"
	// FieldContractorID holds the string denoting the contractor_id field in the database.
	FieldContractorID = "contractor_id"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeContractor holds the string denoting the contractor edge name in mutations.
	EdgeContractor = "contractor"
	// EdgeJob holds the string denoting the job edge name in mutations.
	EdgeJob = "job"
	// Table holds the table name of the jobapplication in the database.
	Table = "job_application"
	// ContractorTable is the table that holds the contractor relation/edge.
	ContractorTable = "job_application"
	// ContractorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ContractorInverseTable = "users"
	// ContractorColumn is the table column denoting the contractor relation/edge.
	ContractorColumn = "contractor_id"
	// JobTable is the table that holds the job relation/edge.
	JobTable = "job_application"
	// JobInverseTable is the table name for the Job entity.
	// It exists in this package in order to avoid circular dependency with the "job" package.
	JobInverseTable = "jobs"
	// JobColumn is the table column denoting the job relation/edge.
	JobColumn = "job_id"
)

// Columns holds all SQL columns for jobapplication fields.
var Columns = []string{
	FieldID,
	FieldJobID,
	FieldContractorID,
	FieldState,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// State defines the type for the "state" enum field.
type State string

// StateWaiting is the default value of the State enum.
const DefaultState = StateWaiting

// State values.
const (
	StateWaiting   State = "Waiting"
	StateAccepted  State = "Accepted"
	StateRejected  State = "Rejected"
	StateWithdrawn State = "Withdrawn"
)

func (s State) String() string {
	return string(s)
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(s State) error {
	switch s {
	case StateWaiting, StateAccepted, StateRejected, StateWithdrawn:
		return nil
	default:
		return fmt.Errorf("jobapplication: invalid enum value for state field: %q", s)
	}
}

// OrderOption defines the ordering options for the JobApplication queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByJobID orders the results by the job_id field.
func ByJobID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobID, opts...).ToFunc()
}

// ByContractorID orders the results by the contractor_id field.
func ByContractorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContractorID, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByContractorField orders the results by contractor field.
func ByContractorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContractorStep(), sql.OrderByField(field, opts...))
	}
}

// ByJobField orders the results by job field.
func ByJobField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobStep(), sql.OrderByField(field, opts...))
	}
}
func newContractorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContractorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ContractorTable, ContractorColumn),
	)
}
func newJobStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, JobTable, JobColumn),
	)
}
