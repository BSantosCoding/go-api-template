// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-api-template/ent/job"
	"go-api-template/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Job is the model entity for the Job schema.
type Job struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Rate holds the value of the "rate" field.
	Rate float64 `json:"rate,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration int `json:"duration,omitempty"`
	// EmployerID holds the value of the "employer_id" field.
	EmployerID uuid.UUID `json:"employer_id,omitempty"`
	// ContractorID holds the value of the "contractor_id" field.
	ContractorID uuid.UUID `json:"contractor_id,omitempty"`
	// State holds the value of the "state" field.
	State job.State `json:"state,omitempty"`
	// InvoiceInterval holds the value of the "invoice_interval" field.
	InvoiceInterval int `json:"invoice_interval,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobQuery when eager-loading is set.
	Edges        JobEdges `json:"edges"`
	selectValues sql.SelectValues
}

// JobEdges holds the relations/edges for other nodes in the graph.
type JobEdges struct {
	// Employer holds the value of the employer edge.
	Employer *User `json:"employer,omitempty"`
	// Contractor holds the value of the contractor edge.
	Contractor *User `json:"contractor,omitempty"`
	// Invoices holds the value of the invoices edge.
	Invoices []*Invoice `json:"invoices,omitempty"`
	// Applications holds the value of the applications edge.
	Applications []*JobApplication `json:"applications,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// EmployerOrErr returns the Employer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobEdges) EmployerOrErr() (*User, error) {
	if e.Employer != nil {
		return e.Employer, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "employer"}
}

// ContractorOrErr returns the Contractor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobEdges) ContractorOrErr() (*User, error) {
	if e.Contractor != nil {
		return e.Contractor, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "contractor"}
}

// InvoicesOrErr returns the Invoices value or an error if the edge
// was not loaded in eager-loading.
func (e JobEdges) InvoicesOrErr() ([]*Invoice, error) {
	if e.loadedTypes[2] {
		return e.Invoices, nil
	}
	return nil, &NotLoadedError{edge: "invoices"}
}

// ApplicationsOrErr returns the Applications value or an error if the edge
// was not loaded in eager-loading.
func (e JobEdges) ApplicationsOrErr() ([]*JobApplication, error) {
	if e.loadedTypes[3] {
		return e.Applications, nil
	}
	return nil, &NotLoadedError{edge: "applications"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Job) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case job.FieldRate:
			values[i] = new(sql.NullFloat64)
		case job.FieldDuration, job.FieldInvoiceInterval:
			values[i] = new(sql.NullInt64)
		case job.FieldState:
			values[i] = new(sql.NullString)
		case job.FieldCreatedAt, job.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case job.FieldID, job.FieldEmployerID, job.FieldContractorID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Job fields.
func (j *Job) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case job.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				j.ID = *value
			}
		case job.FieldRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field rate", values[i])
			} else if value.Valid {
				j.Rate = value.Float64
			}
		case job.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				j.Duration = int(value.Int64)
			}
		case job.FieldEmployerID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field employer_id", values[i])
			} else if value != nil {
				j.EmployerID = *value
			}
		case job.FieldContractorID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field contractor_id", values[i])
			} else if value != nil {
				j.ContractorID = *value
			}
		case job.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				j.State = job.State(value.String)
			}
		case job.FieldInvoiceInterval:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field invoice_interval", values[i])
			} else if value.Valid {
				j.InvoiceInterval = int(value.Int64)
			}
		case job.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				j.CreatedAt = value.Time
			}
		case job.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				j.UpdatedAt = value.Time
			}
		default:
			j.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Job.
// This includes values selected through modifiers, order, etc.
func (j *Job) Value(name string) (ent.Value, error) {
	return j.selectValues.Get(name)
}

// QueryEmployer queries the "employer" edge of the Job entity.
func (j *Job) QueryEmployer() *UserQuery {
	return NewJobClient(j.config).QueryEmployer(j)
}

// QueryContractor queries the "contractor" edge of the Job entity.
func (j *Job) QueryContractor() *UserQuery {
	return NewJobClient(j.config).QueryContractor(j)
}

// QueryInvoices queries the "invoices" edge of the Job entity.
func (j *Job) QueryInvoices() *InvoiceQuery {
	return NewJobClient(j.config).QueryInvoices(j)
}

// QueryApplications queries the "applications" edge of the Job entity.
func (j *Job) QueryApplications() *JobApplicationQuery {
	return NewJobClient(j.config).QueryApplications(j)
}

// Update returns a builder for updating this Job.
// Note that you need to call Job.Unwrap() before calling this method if this Job
// was returned from a transaction, and the transaction was committed or rolled back.
func (j *Job) Update() *JobUpdateOne {
	return NewJobClient(j.config).UpdateOne(j)
}

// Unwrap unwraps the Job entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (j *Job) Unwrap() *Job {
	_tx, ok := j.config.driver.(*txDriver)
	if !ok {
		panic("ent: Job is not a transactional entity")
	}
	j.config.driver = _tx.drv
	return j
}

// String implements the fmt.Stringer.
func (j *Job) String() string {
	var builder strings.Builder
	builder.WriteString("Job(")
	builder.WriteString(fmt.Sprintf("id=%v, ", j.ID))
	builder.WriteString("rate=")
	builder.WriteString(fmt.Sprintf("%v", j.Rate))
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", j.Duration))
	builder.WriteString(", ")
	builder.WriteString("employer_id=")
	builder.WriteString(fmt.Sprintf("%v", j.EmployerID))
	builder.WriteString(", ")
	builder.WriteString("contractor_id=")
	builder.WriteString(fmt.Sprintf("%v", j.ContractorID))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", j.State))
	builder.WriteString(", ")
	builder.WriteString("invoice_interval=")
	builder.WriteString(fmt.Sprintf("%v", j.InvoiceInterval))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(j.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(j.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Jobs is a parsable slice of Job.
type Jobs []*Job
