// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPasswordHash holds the string denoting the password_hash field in the database.
	FieldPasswordHash = "password_hash"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeJobsAsEmployer holds the string denoting the jobsasemployer edge name in mutations.
	EdgeJobsAsEmployer = "jobsAsEmployer"
	// EdgeJobsAsContractor holds the string denoting the jobsascontractor edge name in mutations.
	EdgeJobsAsContractor = "jobsAsContractor"
	// EdgeApplicationsAsContractor holds the string denoting the applicationsascontractor edge name in mutations.
	EdgeApplicationsAsContractor = "applicationsAsContractor"
	// Table holds the table name of the user in the database.
	Table = "users"
	// JobsAsEmployerTable is the table that holds the jobsAsEmployer relation/edge.
	JobsAsEmployerTable = "jobs"
	// JobsAsEmployerInverseTable is the table name for the Job entity.
	// It exists in this package in order to avoid circular dependency with the "job" package.
	JobsAsEmployerInverseTable = "jobs"
	// JobsAsEmployerColumn is the table column denoting the jobsAsEmployer relation/edge.
	JobsAsEmployerColumn = "employer_id"
	// JobsAsContractorTable is the table that holds the jobsAsContractor relation/edge.
	JobsAsContractorTable = "jobs"
	// JobsAsContractorInverseTable is the table name for the Job entity.
	// It exists in this package in order to avoid circular dependency with the "job" package.
	JobsAsContractorInverseTable = "jobs"
	// JobsAsContractorColumn is the table column denoting the jobsAsContractor relation/edge.
	JobsAsContractorColumn = "contractor_id"
	// ApplicationsAsContractorTable is the table that holds the applicationsAsContractor relation/edge.
	ApplicationsAsContractorTable = "job_applications"
	// ApplicationsAsContractorInverseTable is the table name for the JobApplication entity.
	// It exists in this package in order to avoid circular dependency with the "jobapplication" package.
	ApplicationsAsContractorInverseTable = "job_applications"
	// ApplicationsAsContractorColumn is the table column denoting the applicationsAsContractor relation/edge.
	ApplicationsAsContractorColumn = "contractor_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldEmail,
	FieldPasswordHash,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PasswordHashValidator is a validator for the "password_hash" field. It is called by the builders before save.
	PasswordHashValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPasswordHash orders the results by the password_hash field.
func ByPasswordHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPasswordHash, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByJobsAsEmployerCount orders the results by jobsAsEmployer count.
func ByJobsAsEmployerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJobsAsEmployerStep(), opts...)
	}
}

// ByJobsAsEmployer orders the results by jobsAsEmployer terms.
func ByJobsAsEmployer(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobsAsEmployerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByJobsAsContractorCount orders the results by jobsAsContractor count.
func ByJobsAsContractorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJobsAsContractorStep(), opts...)
	}
}

// ByJobsAsContractor orders the results by jobsAsContractor terms.
func ByJobsAsContractor(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobsAsContractorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByApplicationsAsContractorCount orders the results by applicationsAsContractor count.
func ByApplicationsAsContractorCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newApplicationsAsContractorStep(), opts...)
	}
}

// ByApplicationsAsContractor orders the results by applicationsAsContractor terms.
func ByApplicationsAsContractor(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApplicationsAsContractorStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newJobsAsEmployerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobsAsEmployerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, JobsAsEmployerTable, JobsAsEmployerColumn),
	)
}
func newJobsAsContractorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobsAsContractorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, JobsAsContractorTable, JobsAsContractorColumn),
	)
}
func newApplicationsAsContractorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApplicationsAsContractorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ApplicationsAsContractorTable, ApplicationsAsContractorColumn),
	)
}
